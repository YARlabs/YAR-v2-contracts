{
  "address": "0x201a75a28BAAd9d1917cdCB4a10f12D27Bb96A08",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "initialNativeName",
          "type": "string"
        },
        {
          "internalType": "string",
          "name": "initialNativeSymbol",
          "type": "string"
        },
        {
          "internalType": "uint8",
          "name": "initialNativeDecimals",
          "type": "uint8"
        },
        {
          "internalType": "address",
          "name": "intialYarRequest",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "intialYarResponse",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "target",
          "type": "address"
        }
      ],
      "name": "AddressEmptyCode",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "AddressInsufficientBalance",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "FailedInnerCall",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "token",
          "type": "address"
        }
      ],
      "name": "SafeERC20FailedOperation",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "bridgedTokenImplementation",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "chainId",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "originalChainId",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "originalToken",
          "type": "address"
        },
        {
          "internalType": "string",
          "name": "name",
          "type": "string"
        },
        {
          "internalType": "string",
          "name": "symbol",
          "type": "string"
        },
        {
          "internalType": "uint8",
          "name": "decimals",
          "type": "uint8"
        }
      ],
      "name": "deployFrom",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "token",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "targetChainId",
          "type": "uint256"
        }
      ],
      "name": "deployTo",
      "outputs": [
        {
          "components": [
            {
              "internalType": "uint256",
              "name": "initialChainId",
              "type": "uint256"
            },
            {
              "internalType": "address",
              "name": "sender",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "payer",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "targetChainId",
              "type": "uint256"
            },
            {
              "internalType": "address",
              "name": "target",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "value",
              "type": "uint256"
            },
            {
              "internalType": "bytes",
              "name": "data",
              "type": "bytes"
            }
          ],
          "internalType": "struct YarLib.YarTX",
          "name": "",
          "type": "tuple"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "originalChainId",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "originalToken",
          "type": "address"
        }
      ],
      "name": "getBridgedTokenAddress",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_chainId",
          "type": "uint256"
        }
      ],
      "name": "getPeer",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "bridgedToken",
          "type": "address"
        }
      ],
      "name": "isBridgedToken",
      "outputs": [
        {
          "internalType": "bool",
          "name": "exists",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "nativeDecimals",
      "outputs": [
        {
          "internalType": "uint8",
          "name": "",
          "type": "uint8"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "nativeName",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "nativeSymbol",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "chainId",
          "type": "uint256"
        }
      ],
      "name": "peers",
      "outputs": [
        {
          "internalType": "address",
          "name": "peer",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "newChainId",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "newPeer",
          "type": "address"
        }
      ],
      "name": "setPeer",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "originalChainId",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "originalToken",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "recipient",
          "type": "address"
        }
      ],
      "name": "transferFrom",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "token",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "targetChainId",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "recipient",
          "type": "address"
        }
      ],
      "name": "transferTo",
      "outputs": [
        {
          "components": [
            {
              "internalType": "uint256",
              "name": "initialChainId",
              "type": "uint256"
            },
            {
              "internalType": "address",
              "name": "sender",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "payer",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "targetChainId",
              "type": "uint256"
            },
            {
              "internalType": "address",
              "name": "target",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "value",
              "type": "uint256"
            },
            {
              "internalType": "bytes",
              "name": "data",
              "type": "bytes"
            }
          ],
          "internalType": "struct YarLib.YarTX",
          "name": "",
          "type": "tuple"
        }
      ],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "yarRequest",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "yarResponse",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    }
  ],
  "transactionHash": "0x87b2652b623db9720b5982adb0799a2d509d48dac6986a79d869562e2ff79544",
  "receipt": {
    "to": null,
    "from": "0x638eCb938f1FD74ba0A6b91e80B6b46D30b8eEA6",
    "contractAddress": "0x201a75a28BAAd9d1917cdCB4a10f12D27Bb96A08",
    "transactionIndex": 0,
    "gasUsed": "2981321",
    "logsBloom": "0x
    "blockHash": "0x3a29fa10c5d4f6333ea62b4991f6c38465126ad5cb45623f1c2a713c59a7c375",
    "transactionHash": "0x87b2652b623db9720b5982adb0799a2d509d48dac6986a79d869562e2ff79544",
    "logs": [],
    "blockNumber": 4151198,
    "cumulativeGasUsed": "2981321",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "Yar",
    "YAR",
    18,
    "0x262B9071CFDb531092df1c32d855eAaDD4C7D923",
    "0x9b72eDa2475f1471374b0cF96c1fc2590a4E2169"
  ],
  "numDeployments": 1,
  "solcInputHash": "10e9f0eff870565b1ca540e13cf6fad9",
  "metadata": "{\"compiler\":{\"version\":\"0.8.20+commit.a1b79de6\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"string\",\"name\":\"initialNativeName\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"initialNativeSymbol\",\"type\":\"string\"},{\"internalType\":\"uint8\",\"name\":\"initialNativeDecimals\",\"type\":\"uint8\"},{\"internalType\":\"address\",\"name\":\"intialYarRequest\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"intialYarResponse\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"target\",\"type\":\"address\"}],\"name\":\"AddressEmptyCode\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"AddressInsufficientBalance\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"FailedInnerCall\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"}],\"name\":\"SafeERC20FailedOperation\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"bridgedTokenImplementation\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"chainId\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"originalChainId\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"originalToken\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"symbol\",\"type\":\"string\"},{\"internalType\":\"uint8\",\"name\":\"decimals\",\"type\":\"uint8\"}],\"name\":\"deployFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"targetChainId\",\"type\":\"uint256\"}],\"name\":\"deployTo\",\"outputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"initialChainId\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"payer\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"targetChainId\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"target\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"internalType\":\"struct YarLib.YarTX\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"originalChainId\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"originalToken\",\"type\":\"address\"}],\"name\":\"getBridgedTokenAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_chainId\",\"type\":\"uint256\"}],\"name\":\"getPeer\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"bridgedToken\",\"type\":\"address\"}],\"name\":\"isBridgedToken\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"exists\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"nativeDecimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"nativeName\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"nativeSymbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"chainId\",\"type\":\"uint256\"}],\"name\":\"peers\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"peer\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"newChainId\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"newPeer\",\"type\":\"address\"}],\"name\":\"setPeer\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"originalChainId\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"originalToken\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"}],\"name\":\"transferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"targetChainId\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"}],\"name\":\"transferTo\",\"outputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"initialChainId\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"payer\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"targetChainId\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"target\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"internalType\":\"struct YarLib.YarTX\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"yarRequest\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"yarResponse\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"errors\":{\"AddressEmptyCode(address)\":[{\"details\":\"There's no code at `target` (it is not a contract).\"}],\"AddressInsufficientBalance(address)\":[{\"details\":\"The ETH balance of the account is not enough to perform the operation.\"}],\"FailedInnerCall()\":[{\"details\":\"A call to an address target failed. The target may have reverted.\"}],\"SafeERC20FailedOperation(address)\":[{\"details\":\"An operation with an ERC20 token failed.\"}]},\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/apps/bridge20/YarBridge20.sol\":\"YarBridge20\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[],\"viaIR\":true},\"sources\":{\"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (access/Ownable.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {ContextUpgradeable} from \\\"../utils/ContextUpgradeable.sol\\\";\\nimport {Initializable} from \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * The initial owner is set to the address provided by the deployer. This can\\n * later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract OwnableUpgradeable is Initializable, ContextUpgradeable {\\n    /// @custom:storage-location erc7201:openzeppelin.storage.Ownable\\n    struct OwnableStorage {\\n        address _owner;\\n    }\\n\\n    // keccak256(abi.encode(uint256(keccak256(\\\"openzeppelin.storage.Ownable\\\")) - 1)) & ~bytes32(uint256(0xff))\\n    bytes32 private constant OwnableStorageLocation = 0x9016d09d72d40fdae2fd8ceac6b6234c7706214fd39c1cd1e609a0528c199300;\\n\\n    function _getOwnableStorage() private pure returns (OwnableStorage storage $) {\\n        assembly {\\n            $.slot := OwnableStorageLocation\\n        }\\n    }\\n\\n    /**\\n     * @dev The caller account is not authorized to perform an operation.\\n     */\\n    error OwnableUnauthorizedAccount(address account);\\n\\n    /**\\n     * @dev The owner is not a valid owner account. (eg. `address(0)`)\\n     */\\n    error OwnableInvalidOwner(address owner);\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the address provided by the deployer as the initial owner.\\n     */\\n    function __Ownable_init(address initialOwner) internal onlyInitializing {\\n        __Ownable_init_unchained(initialOwner);\\n    }\\n\\n    function __Ownable_init_unchained(address initialOwner) internal onlyInitializing {\\n        if (initialOwner == address(0)) {\\n            revert OwnableInvalidOwner(address(0));\\n        }\\n        _transferOwnership(initialOwner);\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        _checkOwner();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        OwnableStorage storage $ = _getOwnableStorage();\\n        return $._owner;\\n    }\\n\\n    /**\\n     * @dev Throws if the sender is not the owner.\\n     */\\n    function _checkOwner() internal view virtual {\\n        if (owner() != _msgSender()) {\\n            revert OwnableUnauthorizedAccount(_msgSender());\\n        }\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby disabling any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        if (newOwner == address(0)) {\\n            revert OwnableInvalidOwner(address(0));\\n        }\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        OwnableStorage storage $ = _getOwnableStorage();\\n        address oldOwner = $._owner;\\n        $._owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\",\"keccak256\":\"0xc163fcf9bb10138631a9ba5564df1fa25db9adff73bd9ee868a8ae1858fe093a\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (proxy/utils/Initializable.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed\\n * behind a proxy. Since proxied contracts do not make use of a constructor, it's common to move constructor logic to an\\n * external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer\\n * function so it can only be called once. The {initializer} modifier provided by this contract will have this effect.\\n *\\n * The initialization functions use a version number. Once a version number is used, it is consumed and cannot be\\n * reused. This mechanism prevents re-execution of each \\\"step\\\" but allows the creation of new initialization steps in\\n * case an upgrade adds a module that needs to be initialized.\\n *\\n * For example:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```solidity\\n * contract MyToken is ERC20Upgradeable {\\n *     function initialize() initializer public {\\n *         __ERC20_init(\\\"MyToken\\\", \\\"MTK\\\");\\n *     }\\n * }\\n *\\n * contract MyTokenV2 is MyToken, ERC20PermitUpgradeable {\\n *     function initializeV2() reinitializer(2) public {\\n *         __ERC20Permit_init(\\\"MyToken\\\");\\n *     }\\n * }\\n * ```\\n *\\n * TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as\\n * possible by providing the encoded function call as the `_data` argument to {ERC1967Proxy-constructor}.\\n *\\n * CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure\\n * that all initializers are idempotent. This is not verified automatically as constructors are by Solidity.\\n *\\n * [CAUTION]\\n * ====\\n * Avoid leaving a contract uninitialized.\\n *\\n * An uninitialized contract can be taken over by an attacker. This applies to both a proxy and its implementation\\n * contract, which may impact the proxy. To prevent the implementation contract from being used, you should invoke\\n * the {_disableInitializers} function in the constructor to automatically lock it when it is deployed:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```\\n * /// @custom:oz-upgrades-unsafe-allow constructor\\n * constructor() {\\n *     _disableInitializers();\\n * }\\n * ```\\n * ====\\n */\\nabstract contract Initializable {\\n    /**\\n     * @dev Storage of the initializable contract.\\n     *\\n     * It's implemented on a custom ERC-7201 namespace to reduce the risk of storage collisions\\n     * when using with upgradeable contracts.\\n     *\\n     * @custom:storage-location erc7201:openzeppelin.storage.Initializable\\n     */\\n    struct InitializableStorage {\\n        /**\\n         * @dev Indicates that the contract has been initialized.\\n         */\\n        uint64 _initialized;\\n        /**\\n         * @dev Indicates that the contract is in the process of being initialized.\\n         */\\n        bool _initializing;\\n    }\\n\\n    // keccak256(abi.encode(uint256(keccak256(\\\"openzeppelin.storage.Initializable\\\")) - 1)) & ~bytes32(uint256(0xff))\\n    bytes32 private constant INITIALIZABLE_STORAGE = 0xf0c57e16840df040f15088dc2f81fe391c3923bec73e23a9662efc9c229c6a00;\\n\\n    /**\\n     * @dev The contract is already initialized.\\n     */\\n    error InvalidInitialization();\\n\\n    /**\\n     * @dev The contract is not initializing.\\n     */\\n    error NotInitializing();\\n\\n    /**\\n     * @dev Triggered when the contract has been initialized or reinitialized.\\n     */\\n    event Initialized(uint64 version);\\n\\n    /**\\n     * @dev A modifier that defines a protected initializer function that can be invoked at most once. In its scope,\\n     * `onlyInitializing` functions can be used to initialize parent contracts.\\n     *\\n     * Similar to `reinitializer(1)`, except that in the context of a constructor an `initializer` may be invoked any\\n     * number of times. This behavior in the constructor can be useful during testing and is not expected to be used in\\n     * production.\\n     *\\n     * Emits an {Initialized} event.\\n     */\\n    modifier initializer() {\\n        // solhint-disable-next-line var-name-mixedcase\\n        InitializableStorage storage $ = _getInitializableStorage();\\n\\n        // Cache values to avoid duplicated sloads\\n        bool isTopLevelCall = !$._initializing;\\n        uint64 initialized = $._initialized;\\n\\n        // Allowed calls:\\n        // - initialSetup: the contract is not in the initializing state and no previous version was\\n        //                 initialized\\n        // - construction: the contract is initialized at version 1 (no reininitialization) and the\\n        //                 current contract is just being deployed\\n        bool initialSetup = initialized == 0 && isTopLevelCall;\\n        bool construction = initialized == 1 && address(this).code.length == 0;\\n\\n        if (!initialSetup && !construction) {\\n            revert InvalidInitialization();\\n        }\\n        $._initialized = 1;\\n        if (isTopLevelCall) {\\n            $._initializing = true;\\n        }\\n        _;\\n        if (isTopLevelCall) {\\n            $._initializing = false;\\n            emit Initialized(1);\\n        }\\n    }\\n\\n    /**\\n     * @dev A modifier that defines a protected reinitializer function that can be invoked at most once, and only if the\\n     * contract hasn't been initialized to a greater version before. In its scope, `onlyInitializing` functions can be\\n     * used to initialize parent contracts.\\n     *\\n     * A reinitializer may be used after the original initialization step. This is essential to configure modules that\\n     * are added through upgrades and that require initialization.\\n     *\\n     * When `version` is 1, this modifier is similar to `initializer`, except that functions marked with `reinitializer`\\n     * cannot be nested. If one is invoked in the context of another, execution will revert.\\n     *\\n     * Note that versions can jump in increments greater than 1; this implies that if multiple reinitializers coexist in\\n     * a contract, executing them in the right order is up to the developer or operator.\\n     *\\n     * WARNING: Setting the version to 2**64 - 1 will prevent any future reinitialization.\\n     *\\n     * Emits an {Initialized} event.\\n     */\\n    modifier reinitializer(uint64 version) {\\n        // solhint-disable-next-line var-name-mixedcase\\n        InitializableStorage storage $ = _getInitializableStorage();\\n\\n        if ($._initializing || $._initialized >= version) {\\n            revert InvalidInitialization();\\n        }\\n        $._initialized = version;\\n        $._initializing = true;\\n        _;\\n        $._initializing = false;\\n        emit Initialized(version);\\n    }\\n\\n    /**\\n     * @dev Modifier to protect an initialization function so that it can only be invoked by functions with the\\n     * {initializer} and {reinitializer} modifiers, directly or indirectly.\\n     */\\n    modifier onlyInitializing() {\\n        _checkInitializing();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Reverts if the contract is not in an initializing state. See {onlyInitializing}.\\n     */\\n    function _checkInitializing() internal view virtual {\\n        if (!_isInitializing()) {\\n            revert NotInitializing();\\n        }\\n    }\\n\\n    /**\\n     * @dev Locks the contract, preventing any future reinitialization. This cannot be part of an initializer call.\\n     * Calling this in the constructor of a contract will prevent that contract from being initialized or reinitialized\\n     * to any version. It is recommended to use this to lock implementation contracts that are designed to be called\\n     * through proxies.\\n     *\\n     * Emits an {Initialized} event the first time it is successfully executed.\\n     */\\n    function _disableInitializers() internal virtual {\\n        // solhint-disable-next-line var-name-mixedcase\\n        InitializableStorage storage $ = _getInitializableStorage();\\n\\n        if ($._initializing) {\\n            revert InvalidInitialization();\\n        }\\n        if ($._initialized != type(uint64).max) {\\n            $._initialized = type(uint64).max;\\n            emit Initialized(type(uint64).max);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the highest version that has been initialized. See {reinitializer}.\\n     */\\n    function _getInitializedVersion() internal view returns (uint64) {\\n        return _getInitializableStorage()._initialized;\\n    }\\n\\n    /**\\n     * @dev Returns `true` if the contract is currently initializing. See {onlyInitializing}.\\n     */\\n    function _isInitializing() internal view returns (bool) {\\n        return _getInitializableStorage()._initializing;\\n    }\\n\\n    /**\\n     * @dev Returns a pointer to the storage namespace.\\n     */\\n    // solhint-disable-next-line var-name-mixedcase\\n    function _getInitializableStorage() private pure returns (InitializableStorage storage $) {\\n        assembly {\\n            $.slot := INITIALIZABLE_STORAGE\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x631188737069917d2f909d29ce62c4d48611d326686ba6683e26b72a23bfac0b\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (token/ERC20/ERC20.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {IERC20} from \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport {IERC20Metadata} from \\\"@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol\\\";\\nimport {ContextUpgradeable} from \\\"../../utils/ContextUpgradeable.sol\\\";\\nimport {IERC20Errors} from \\\"@openzeppelin/contracts/interfaces/draft-IERC6093.sol\\\";\\nimport {Initializable} from \\\"../../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC20} interface.\\n *\\n * This implementation is agnostic to the way tokens are created. This means\\n * that a supply mechanism has to be added in a derived contract using {_mint}.\\n *\\n * TIP: For a detailed writeup see our guide\\n * https://forum.openzeppelin.com/t/how-to-implement-erc20-supply-mechanisms/226[How\\n * to implement supply mechanisms].\\n *\\n * The default value of {decimals} is 18. To change this, you should override\\n * this function so it returns a different value.\\n *\\n * We have followed general OpenZeppelin Contracts guidelines: functions revert\\n * instead returning `false` on failure. This behavior is nonetheless\\n * conventional and does not conflict with the expectations of ERC20\\n * applications.\\n *\\n * Additionally, an {Approval} event is emitted on calls to {transferFrom}.\\n * This allows applications to reconstruct the allowance for all accounts just\\n * by listening to said events. Other implementations of the EIP may not emit\\n * these events, as it isn't required by the specification.\\n */\\nabstract contract ERC20Upgradeable is Initializable, ContextUpgradeable, IERC20, IERC20Metadata, IERC20Errors {\\n    /// @custom:storage-location erc7201:openzeppelin.storage.ERC20\\n    struct ERC20Storage {\\n        mapping(address account => uint256) _balances;\\n\\n        mapping(address account => mapping(address spender => uint256)) _allowances;\\n\\n        uint256 _totalSupply;\\n\\n        string _name;\\n        string _symbol;\\n    }\\n\\n    // keccak256(abi.encode(uint256(keccak256(\\\"openzeppelin.storage.ERC20\\\")) - 1)) & ~bytes32(uint256(0xff))\\n    bytes32 private constant ERC20StorageLocation = 0x52c63247e1f47db19d5ce0460030c497f067ca4cebf71ba98eeadabe20bace00;\\n\\n    function _getERC20Storage() private pure returns (ERC20Storage storage $) {\\n        assembly {\\n            $.slot := ERC20StorageLocation\\n        }\\n    }\\n\\n    /**\\n     * @dev Sets the values for {name} and {symbol}.\\n     *\\n     * All two of these values are immutable: they can only be set once during\\n     * construction.\\n     */\\n    function __ERC20_init(string memory name_, string memory symbol_) internal onlyInitializing {\\n        __ERC20_init_unchained(name_, symbol_);\\n    }\\n\\n    function __ERC20_init_unchained(string memory name_, string memory symbol_) internal onlyInitializing {\\n        ERC20Storage storage $ = _getERC20Storage();\\n        $._name = name_;\\n        $._symbol = symbol_;\\n    }\\n\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() public view virtual returns (string memory) {\\n        ERC20Storage storage $ = _getERC20Storage();\\n        return $._name;\\n    }\\n\\n    /**\\n     * @dev Returns the symbol of the token, usually a shorter version of the\\n     * name.\\n     */\\n    function symbol() public view virtual returns (string memory) {\\n        ERC20Storage storage $ = _getERC20Storage();\\n        return $._symbol;\\n    }\\n\\n    /**\\n     * @dev Returns the number of decimals used to get its user representation.\\n     * For example, if `decimals` equals `2`, a balance of `505` tokens should\\n     * be displayed to a user as `5.05` (`505 / 10 ** 2`).\\n     *\\n     * Tokens usually opt for a value of 18, imitating the relationship between\\n     * Ether and Wei. This is the default value returned by this function, unless\\n     * it's overridden.\\n     *\\n     * NOTE: This information is only used for _display_ purposes: it in\\n     * no way affects any of the arithmetic of the contract, including\\n     * {IERC20-balanceOf} and {IERC20-transfer}.\\n     */\\n    function decimals() public view virtual returns (uint8) {\\n        return 18;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-totalSupply}.\\n     */\\n    function totalSupply() public view virtual returns (uint256) {\\n        ERC20Storage storage $ = _getERC20Storage();\\n        return $._totalSupply;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-balanceOf}.\\n     */\\n    function balanceOf(address account) public view virtual returns (uint256) {\\n        ERC20Storage storage $ = _getERC20Storage();\\n        return $._balances[account];\\n    }\\n\\n    /**\\n     * @dev See {IERC20-transfer}.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     * - the caller must have a balance of at least `value`.\\n     */\\n    function transfer(address to, uint256 value) public virtual returns (bool) {\\n        address owner = _msgSender();\\n        _transfer(owner, to, value);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-allowance}.\\n     */\\n    function allowance(address owner, address spender) public view virtual returns (uint256) {\\n        ERC20Storage storage $ = _getERC20Storage();\\n        return $._allowances[owner][spender];\\n    }\\n\\n    /**\\n     * @dev See {IERC20-approve}.\\n     *\\n     * NOTE: If `value` is the maximum `uint256`, the allowance is not updated on\\n     * `transferFrom`. This is semantically equivalent to an infinite approval.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     */\\n    function approve(address spender, uint256 value) public virtual returns (bool) {\\n        address owner = _msgSender();\\n        _approve(owner, spender, value);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-transferFrom}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance. This is not\\n     * required by the EIP. See the note at the beginning of {ERC20}.\\n     *\\n     * NOTE: Does not update the allowance if the current allowance\\n     * is the maximum `uint256`.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` and `to` cannot be the zero address.\\n     * - `from` must have a balance of at least `value`.\\n     * - the caller must have allowance for ``from``'s tokens of at least\\n     * `value`.\\n     */\\n    function transferFrom(address from, address to, uint256 value) public virtual returns (bool) {\\n        address spender = _msgSender();\\n        _spendAllowance(from, spender, value);\\n        _transfer(from, to, value);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Moves a `value` amount of tokens from `from` to `to`.\\n     *\\n     * This internal function is equivalent to {transfer}, and can be used to\\n     * e.g. implement automatic token fees, slashing mechanisms, etc.\\n     *\\n     * Emits a {Transfer} event.\\n     *\\n     * NOTE: This function is not virtual, {_update} should be overridden instead.\\n     */\\n    function _transfer(address from, address to, uint256 value) internal {\\n        if (from == address(0)) {\\n            revert ERC20InvalidSender(address(0));\\n        }\\n        if (to == address(0)) {\\n            revert ERC20InvalidReceiver(address(0));\\n        }\\n        _update(from, to, value);\\n    }\\n\\n    /**\\n     * @dev Transfers a `value` amount of tokens from `from` to `to`, or alternatively mints (or burns) if `from`\\n     * (or `to`) is the zero address. All customizations to transfers, mints, and burns should be done by overriding\\n     * this function.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _update(address from, address to, uint256 value) internal virtual {\\n        ERC20Storage storage $ = _getERC20Storage();\\n        if (from == address(0)) {\\n            // Overflow check required: The rest of the code assumes that totalSupply never overflows\\n            $._totalSupply += value;\\n        } else {\\n            uint256 fromBalance = $._balances[from];\\n            if (fromBalance < value) {\\n                revert ERC20InsufficientBalance(from, fromBalance, value);\\n            }\\n            unchecked {\\n                // Overflow not possible: value <= fromBalance <= totalSupply.\\n                $._balances[from] = fromBalance - value;\\n            }\\n        }\\n\\n        if (to == address(0)) {\\n            unchecked {\\n                // Overflow not possible: value <= totalSupply or value <= fromBalance <= totalSupply.\\n                $._totalSupply -= value;\\n            }\\n        } else {\\n            unchecked {\\n                // Overflow not possible: balance + value is at most totalSupply, which we know fits into a uint256.\\n                $._balances[to] += value;\\n            }\\n        }\\n\\n        emit Transfer(from, to, value);\\n    }\\n\\n    /**\\n     * @dev Creates a `value` amount of tokens and assigns them to `account`, by transferring it from address(0).\\n     * Relies on the `_update` mechanism\\n     *\\n     * Emits a {Transfer} event with `from` set to the zero address.\\n     *\\n     * NOTE: This function is not virtual, {_update} should be overridden instead.\\n     */\\n    function _mint(address account, uint256 value) internal {\\n        if (account == address(0)) {\\n            revert ERC20InvalidReceiver(address(0));\\n        }\\n        _update(address(0), account, value);\\n    }\\n\\n    /**\\n     * @dev Destroys a `value` amount of tokens from `account`, lowering the total supply.\\n     * Relies on the `_update` mechanism.\\n     *\\n     * Emits a {Transfer} event with `to` set to the zero address.\\n     *\\n     * NOTE: This function is not virtual, {_update} should be overridden instead\\n     */\\n    function _burn(address account, uint256 value) internal {\\n        if (account == address(0)) {\\n            revert ERC20InvalidSender(address(0));\\n        }\\n        _update(account, address(0), value);\\n    }\\n\\n    /**\\n     * @dev Sets `value` as the allowance of `spender` over the `owner` s tokens.\\n     *\\n     * This internal function is equivalent to `approve`, and can be used to\\n     * e.g. set automatic allowances for certain subsystems, etc.\\n     *\\n     * Emits an {Approval} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `owner` cannot be the zero address.\\n     * - `spender` cannot be the zero address.\\n     *\\n     * Overrides to this logic should be done to the variant with an additional `bool emitEvent` argument.\\n     */\\n    function _approve(address owner, address spender, uint256 value) internal {\\n        _approve(owner, spender, value, true);\\n    }\\n\\n    /**\\n     * @dev Variant of {_approve} with an optional flag to enable or disable the {Approval} event.\\n     *\\n     * By default (when calling {_approve}) the flag is set to true. On the other hand, approval changes made by\\n     * `_spendAllowance` during the `transferFrom` operation set the flag to false. This saves gas by not emitting any\\n     * `Approval` event during `transferFrom` operations.\\n     *\\n     * Anyone who wishes to continue emitting `Approval` events on the`transferFrom` operation can force the flag to\\n     * true using the following override:\\n     * ```\\n     * function _approve(address owner, address spender, uint256 value, bool) internal virtual override {\\n     *     super._approve(owner, spender, value, true);\\n     * }\\n     * ```\\n     *\\n     * Requirements are the same as {_approve}.\\n     */\\n    function _approve(address owner, address spender, uint256 value, bool emitEvent) internal virtual {\\n        ERC20Storage storage $ = _getERC20Storage();\\n        if (owner == address(0)) {\\n            revert ERC20InvalidApprover(address(0));\\n        }\\n        if (spender == address(0)) {\\n            revert ERC20InvalidSpender(address(0));\\n        }\\n        $._allowances[owner][spender] = value;\\n        if (emitEvent) {\\n            emit Approval(owner, spender, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Updates `owner` s allowance for `spender` based on spent `value`.\\n     *\\n     * Does not update the allowance value in case of infinite allowance.\\n     * Revert if not enough allowance is available.\\n     *\\n     * Does not emit an {Approval} event.\\n     */\\n    function _spendAllowance(address owner, address spender, uint256 value) internal virtual {\\n        uint256 currentAllowance = allowance(owner, spender);\\n        if (currentAllowance != type(uint256).max) {\\n            if (currentAllowance < value) {\\n                revert ERC20InsufficientAllowance(spender, currentAllowance, value);\\n            }\\n            unchecked {\\n                _approve(owner, spender, currentAllowance - value, false);\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x9a1766b1921bf91b3e61eb53c7a6e70725254befd4bdcbbcd3af40bd9f66856f\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.1) (utils/Context.sol)\\n\\npragma solidity ^0.8.20;\\nimport {Initializable} from \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract ContextUpgradeable is Initializable {\\n    function __Context_init() internal onlyInitializing {\\n    }\\n\\n    function __Context_init_unchained() internal onlyInitializing {\\n    }\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n\\n    function _contextSuffixLength() internal view virtual returns (uint256) {\\n        return 0;\\n    }\\n}\\n\",\"keccak256\":\"0xdbef5f0c787055227243a7318ef74c8a5a1108ca3a07f2b3a00ef67769e1e397\",\"license\":\"MIT\"},\"@openzeppelin/contracts/interfaces/draft-IERC6093.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (interfaces/draft-IERC6093.sol)\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Standard ERC20 Errors\\n * Interface of the https://eips.ethereum.org/EIPS/eip-6093[ERC-6093] custom errors for ERC20 tokens.\\n */\\ninterface IERC20Errors {\\n    /**\\n     * @dev Indicates an error related to the current `balance` of a `sender`. Used in transfers.\\n     * @param sender Address whose tokens are being transferred.\\n     * @param balance Current balance for the interacting account.\\n     * @param needed Minimum amount required to perform a transfer.\\n     */\\n    error ERC20InsufficientBalance(address sender, uint256 balance, uint256 needed);\\n\\n    /**\\n     * @dev Indicates a failure with the token `sender`. Used in transfers.\\n     * @param sender Address whose tokens are being transferred.\\n     */\\n    error ERC20InvalidSender(address sender);\\n\\n    /**\\n     * @dev Indicates a failure with the token `receiver`. Used in transfers.\\n     * @param receiver Address to which tokens are being transferred.\\n     */\\n    error ERC20InvalidReceiver(address receiver);\\n\\n    /**\\n     * @dev Indicates a failure with the `spender`\\u2019s `allowance`. Used in transfers.\\n     * @param spender Address that may be allowed to operate on tokens without being their owner.\\n     * @param allowance Amount of tokens a `spender` is allowed to operate with.\\n     * @param needed Minimum amount required to perform a transfer.\\n     */\\n    error ERC20InsufficientAllowance(address spender, uint256 allowance, uint256 needed);\\n\\n    /**\\n     * @dev Indicates a failure with the `approver` of a token to be approved. Used in approvals.\\n     * @param approver Address initiating an approval operation.\\n     */\\n    error ERC20InvalidApprover(address approver);\\n\\n    /**\\n     * @dev Indicates a failure with the `spender` to be approved. Used in approvals.\\n     * @param spender Address that may be allowed to operate on tokens without being their owner.\\n     */\\n    error ERC20InvalidSpender(address spender);\\n}\\n\\n/**\\n * @dev Standard ERC721 Errors\\n * Interface of the https://eips.ethereum.org/EIPS/eip-6093[ERC-6093] custom errors for ERC721 tokens.\\n */\\ninterface IERC721Errors {\\n    /**\\n     * @dev Indicates that an address can't be an owner. For example, `address(0)` is a forbidden owner in EIP-20.\\n     * Used in balance queries.\\n     * @param owner Address of the current owner of a token.\\n     */\\n    error ERC721InvalidOwner(address owner);\\n\\n    /**\\n     * @dev Indicates a `tokenId` whose `owner` is the zero address.\\n     * @param tokenId Identifier number of a token.\\n     */\\n    error ERC721NonexistentToken(uint256 tokenId);\\n\\n    /**\\n     * @dev Indicates an error related to the ownership over a particular token. Used in transfers.\\n     * @param sender Address whose tokens are being transferred.\\n     * @param tokenId Identifier number of a token.\\n     * @param owner Address of the current owner of a token.\\n     */\\n    error ERC721IncorrectOwner(address sender, uint256 tokenId, address owner);\\n\\n    /**\\n     * @dev Indicates a failure with the token `sender`. Used in transfers.\\n     * @param sender Address whose tokens are being transferred.\\n     */\\n    error ERC721InvalidSender(address sender);\\n\\n    /**\\n     * @dev Indicates a failure with the token `receiver`. Used in transfers.\\n     * @param receiver Address to which tokens are being transferred.\\n     */\\n    error ERC721InvalidReceiver(address receiver);\\n\\n    /**\\n     * @dev Indicates a failure with the `operator`\\u2019s approval. Used in transfers.\\n     * @param operator Address that may be allowed to operate on tokens without being their owner.\\n     * @param tokenId Identifier number of a token.\\n     */\\n    error ERC721InsufficientApproval(address operator, uint256 tokenId);\\n\\n    /**\\n     * @dev Indicates a failure with the `approver` of a token to be approved. Used in approvals.\\n     * @param approver Address initiating an approval operation.\\n     */\\n    error ERC721InvalidApprover(address approver);\\n\\n    /**\\n     * @dev Indicates a failure with the `operator` to be approved. Used in approvals.\\n     * @param operator Address that may be allowed to operate on tokens without being their owner.\\n     */\\n    error ERC721InvalidOperator(address operator);\\n}\\n\\n/**\\n * @dev Standard ERC1155 Errors\\n * Interface of the https://eips.ethereum.org/EIPS/eip-6093[ERC-6093] custom errors for ERC1155 tokens.\\n */\\ninterface IERC1155Errors {\\n    /**\\n     * @dev Indicates an error related to the current `balance` of a `sender`. Used in transfers.\\n     * @param sender Address whose tokens are being transferred.\\n     * @param balance Current balance for the interacting account.\\n     * @param needed Minimum amount required to perform a transfer.\\n     * @param tokenId Identifier number of a token.\\n     */\\n    error ERC1155InsufficientBalance(address sender, uint256 balance, uint256 needed, uint256 tokenId);\\n\\n    /**\\n     * @dev Indicates a failure with the token `sender`. Used in transfers.\\n     * @param sender Address whose tokens are being transferred.\\n     */\\n    error ERC1155InvalidSender(address sender);\\n\\n    /**\\n     * @dev Indicates a failure with the token `receiver`. Used in transfers.\\n     * @param receiver Address to which tokens are being transferred.\\n     */\\n    error ERC1155InvalidReceiver(address receiver);\\n\\n    /**\\n     * @dev Indicates a failure with the `operator`\\u2019s approval. Used in transfers.\\n     * @param operator Address that may be allowed to operate on tokens without being their owner.\\n     * @param owner Address of the current owner of a token.\\n     */\\n    error ERC1155MissingApprovalForAll(address operator, address owner);\\n\\n    /**\\n     * @dev Indicates a failure with the `approver` of a token to be approved. Used in approvals.\\n     * @param approver Address initiating an approval operation.\\n     */\\n    error ERC1155InvalidApprover(address approver);\\n\\n    /**\\n     * @dev Indicates a failure with the `operator` to be approved. Used in approvals.\\n     * @param operator Address that may be allowed to operate on tokens without being their owner.\\n     */\\n    error ERC1155InvalidOperator(address operator);\\n\\n    /**\\n     * @dev Indicates an array length mismatch between ids and values in a safeBatchTransferFrom operation.\\n     * Used in batch transfers.\\n     * @param idsLength Length of the array of token identifiers\\n     * @param valuesLength Length of the array of token amounts\\n     */\\n    error ERC1155InvalidArrayLength(uint256 idsLength, uint256 valuesLength);\\n}\\n\",\"keccak256\":\"0x60c65f701957fdd6faea1acb0bb45825791d473693ed9ecb34726fdfaa849dd7\",\"license\":\"MIT\"},\"@openzeppelin/contracts/proxy/ERC1967/ERC1967Utils.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (proxy/ERC1967/ERC1967Utils.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {IBeacon} from \\\"../beacon/IBeacon.sol\\\";\\nimport {Address} from \\\"../../utils/Address.sol\\\";\\nimport {StorageSlot} from \\\"../../utils/StorageSlot.sol\\\";\\n\\n/**\\n * @dev This abstract contract provides getters and event emitting update functions for\\n * https://eips.ethereum.org/EIPS/eip-1967[EIP1967] slots.\\n */\\nlibrary ERC1967Utils {\\n    // We re-declare ERC-1967 events here because they can't be used directly from IERC1967.\\n    // This will be fixed in Solidity 0.8.21. At that point we should remove these events.\\n    /**\\n     * @dev Emitted when the implementation is upgraded.\\n     */\\n    event Upgraded(address indexed implementation);\\n\\n    /**\\n     * @dev Emitted when the admin account has changed.\\n     */\\n    event AdminChanged(address previousAdmin, address newAdmin);\\n\\n    /**\\n     * @dev Emitted when the beacon is changed.\\n     */\\n    event BeaconUpgraded(address indexed beacon);\\n\\n    /**\\n     * @dev Storage slot with the address of the current implementation.\\n     * This is the keccak-256 hash of \\\"eip1967.proxy.implementation\\\" subtracted by 1.\\n     */\\n    // solhint-disable-next-line private-vars-leading-underscore\\n    bytes32 internal constant IMPLEMENTATION_SLOT = 0x360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc;\\n\\n    /**\\n     * @dev The `implementation` of the proxy is invalid.\\n     */\\n    error ERC1967InvalidImplementation(address implementation);\\n\\n    /**\\n     * @dev The `admin` of the proxy is invalid.\\n     */\\n    error ERC1967InvalidAdmin(address admin);\\n\\n    /**\\n     * @dev The `beacon` of the proxy is invalid.\\n     */\\n    error ERC1967InvalidBeacon(address beacon);\\n\\n    /**\\n     * @dev An upgrade function sees `msg.value > 0` that may be lost.\\n     */\\n    error ERC1967NonPayable();\\n\\n    /**\\n     * @dev Returns the current implementation address.\\n     */\\n    function getImplementation() internal view returns (address) {\\n        return StorageSlot.getAddressSlot(IMPLEMENTATION_SLOT).value;\\n    }\\n\\n    /**\\n     * @dev Stores a new address in the EIP1967 implementation slot.\\n     */\\n    function _setImplementation(address newImplementation) private {\\n        if (newImplementation.code.length == 0) {\\n            revert ERC1967InvalidImplementation(newImplementation);\\n        }\\n        StorageSlot.getAddressSlot(IMPLEMENTATION_SLOT).value = newImplementation;\\n    }\\n\\n    /**\\n     * @dev Performs implementation upgrade with additional setup call if data is nonempty.\\n     * This function is payable only if the setup call is performed, otherwise `msg.value` is rejected\\n     * to avoid stuck value in the contract.\\n     *\\n     * Emits an {IERC1967-Upgraded} event.\\n     */\\n    function upgradeToAndCall(address newImplementation, bytes memory data) internal {\\n        _setImplementation(newImplementation);\\n        emit Upgraded(newImplementation);\\n\\n        if (data.length > 0) {\\n            Address.functionDelegateCall(newImplementation, data);\\n        } else {\\n            _checkNonPayable();\\n        }\\n    }\\n\\n    /**\\n     * @dev Storage slot with the admin of the contract.\\n     * This is the keccak-256 hash of \\\"eip1967.proxy.admin\\\" subtracted by 1.\\n     */\\n    // solhint-disable-next-line private-vars-leading-underscore\\n    bytes32 internal constant ADMIN_SLOT = 0xb53127684a568b3173ae13b9f8a6016e243e63b6e8ee1178d6a717850b5d6103;\\n\\n    /**\\n     * @dev Returns the current admin.\\n     *\\n     * TIP: To get this value clients can read directly from the storage slot shown below (specified by EIP1967) using\\n     * the https://eth.wiki/json-rpc/API#eth_getstorageat[`eth_getStorageAt`] RPC call.\\n     * `0xb53127684a568b3173ae13b9f8a6016e243e63b6e8ee1178d6a717850b5d6103`\\n     */\\n    function getAdmin() internal view returns (address) {\\n        return StorageSlot.getAddressSlot(ADMIN_SLOT).value;\\n    }\\n\\n    /**\\n     * @dev Stores a new address in the EIP1967 admin slot.\\n     */\\n    function _setAdmin(address newAdmin) private {\\n        if (newAdmin == address(0)) {\\n            revert ERC1967InvalidAdmin(address(0));\\n        }\\n        StorageSlot.getAddressSlot(ADMIN_SLOT).value = newAdmin;\\n    }\\n\\n    /**\\n     * @dev Changes the admin of the proxy.\\n     *\\n     * Emits an {IERC1967-AdminChanged} event.\\n     */\\n    function changeAdmin(address newAdmin) internal {\\n        emit AdminChanged(getAdmin(), newAdmin);\\n        _setAdmin(newAdmin);\\n    }\\n\\n    /**\\n     * @dev The storage slot of the UpgradeableBeacon contract which defines the implementation for this proxy.\\n     * This is the keccak-256 hash of \\\"eip1967.proxy.beacon\\\" subtracted by 1.\\n     */\\n    // solhint-disable-next-line private-vars-leading-underscore\\n    bytes32 internal constant BEACON_SLOT = 0xa3f0ad74e5423aebfd80d3ef4346578335a9a72aeaee59ff6cb3582b35133d50;\\n\\n    /**\\n     * @dev Returns the current beacon.\\n     */\\n    function getBeacon() internal view returns (address) {\\n        return StorageSlot.getAddressSlot(BEACON_SLOT).value;\\n    }\\n\\n    /**\\n     * @dev Stores a new beacon in the EIP1967 beacon slot.\\n     */\\n    function _setBeacon(address newBeacon) private {\\n        if (newBeacon.code.length == 0) {\\n            revert ERC1967InvalidBeacon(newBeacon);\\n        }\\n\\n        StorageSlot.getAddressSlot(BEACON_SLOT).value = newBeacon;\\n\\n        address beaconImplementation = IBeacon(newBeacon).implementation();\\n        if (beaconImplementation.code.length == 0) {\\n            revert ERC1967InvalidImplementation(beaconImplementation);\\n        }\\n    }\\n\\n    /**\\n     * @dev Change the beacon and trigger a setup call if data is nonempty.\\n     * This function is payable only if the setup call is performed, otherwise `msg.value` is rejected\\n     * to avoid stuck value in the contract.\\n     *\\n     * Emits an {IERC1967-BeaconUpgraded} event.\\n     *\\n     * CAUTION: Invoking this function has no effect on an instance of {BeaconProxy} since v5, since\\n     * it uses an immutable beacon without looking at the value of the ERC-1967 beacon slot for\\n     * efficiency.\\n     */\\n    function upgradeBeaconToAndCall(address newBeacon, bytes memory data) internal {\\n        _setBeacon(newBeacon);\\n        emit BeaconUpgraded(newBeacon);\\n\\n        if (data.length > 0) {\\n            Address.functionDelegateCall(IBeacon(newBeacon).implementation(), data);\\n        } else {\\n            _checkNonPayable();\\n        }\\n    }\\n\\n    /**\\n     * @dev Reverts if `msg.value` is not zero. It can be used to avoid `msg.value` stuck in the contract\\n     * if an upgrade doesn't perform an initialization call.\\n     */\\n    function _checkNonPayable() private {\\n        if (msg.value > 0) {\\n            revert ERC1967NonPayable();\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x06a78f9b3ee3e6d0eb4e4cd635ba49960bea34cac1db8c0a27c75f2319f1fd65\",\"license\":\"MIT\"},\"@openzeppelin/contracts/proxy/Proxy.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (proxy/Proxy.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev This abstract contract provides a fallback function that delegates all calls to another contract using the EVM\\n * instruction `delegatecall`. We refer to the second contract as the _implementation_ behind the proxy, and it has to\\n * be specified by overriding the virtual {_implementation} function.\\n *\\n * Additionally, delegation to the implementation can be triggered manually through the {_fallback} function, or to a\\n * different contract through the {_delegate} function.\\n *\\n * The success and return data of the delegated call will be returned back to the caller of the proxy.\\n */\\nabstract contract Proxy {\\n    /**\\n     * @dev Delegates the current call to `implementation`.\\n     *\\n     * This function does not return to its internal call site, it will return directly to the external caller.\\n     */\\n    function _delegate(address implementation) internal virtual {\\n        assembly {\\n            // Copy msg.data. We take full control of memory in this inline assembly\\n            // block because it will not return to Solidity code. We overwrite the\\n            // Solidity scratch pad at memory position 0.\\n            calldatacopy(0, 0, calldatasize())\\n\\n            // Call the implementation.\\n            // out and outsize are 0 because we don't know the size yet.\\n            let result := delegatecall(gas(), implementation, 0, calldatasize(), 0, 0)\\n\\n            // Copy the returned data.\\n            returndatacopy(0, 0, returndatasize())\\n\\n            switch result\\n            // delegatecall returns 0 on error.\\n            case 0 {\\n                revert(0, returndatasize())\\n            }\\n            default {\\n                return(0, returndatasize())\\n            }\\n        }\\n    }\\n\\n    /**\\n     * @dev This is a virtual function that should be overridden so it returns the address to which the fallback\\n     * function and {_fallback} should delegate.\\n     */\\n    function _implementation() internal view virtual returns (address);\\n\\n    /**\\n     * @dev Delegates the current call to the address returned by `_implementation()`.\\n     *\\n     * This function does not return to its internal call site, it will return directly to the external caller.\\n     */\\n    function _fallback() internal virtual {\\n        _delegate(_implementation());\\n    }\\n\\n    /**\\n     * @dev Fallback function that delegates calls to the address returned by `_implementation()`. Will run if no other\\n     * function in the contract matches the call data.\\n     */\\n    fallback() external payable virtual {\\n        _fallback();\\n    }\\n}\\n\",\"keccak256\":\"0xc3f2ec76a3de8ed7a7007c46166f5550c72c7709e3fc7e8bb3111a7191cdedbd\",\"license\":\"MIT\"},\"@openzeppelin/contracts/proxy/beacon/IBeacon.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (proxy/beacon/IBeacon.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev This is the interface that {BeaconProxy} expects of its beacon.\\n */\\ninterface IBeacon {\\n    /**\\n     * @dev Must return an address that can be used as a delegate call target.\\n     *\\n     * {UpgradeableBeacon} will check that this address is a contract.\\n     */\\n    function implementation() external view returns (address);\\n}\\n\",\"keccak256\":\"0xc59a78b07b44b2cf2e8ab4175fca91e8eca1eee2df7357b8d2a8833e5ea1f64c\",\"license\":\"MIT\"},\"@openzeppelin/contracts/proxy/utils/Initializable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (proxy/utils/Initializable.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed\\n * behind a proxy. Since proxied contracts do not make use of a constructor, it's common to move constructor logic to an\\n * external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer\\n * function so it can only be called once. The {initializer} modifier provided by this contract will have this effect.\\n *\\n * The initialization functions use a version number. Once a version number is used, it is consumed and cannot be\\n * reused. This mechanism prevents re-execution of each \\\"step\\\" but allows the creation of new initialization steps in\\n * case an upgrade adds a module that needs to be initialized.\\n *\\n * For example:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```solidity\\n * contract MyToken is ERC20Upgradeable {\\n *     function initialize() initializer public {\\n *         __ERC20_init(\\\"MyToken\\\", \\\"MTK\\\");\\n *     }\\n * }\\n *\\n * contract MyTokenV2 is MyToken, ERC20PermitUpgradeable {\\n *     function initializeV2() reinitializer(2) public {\\n *         __ERC20Permit_init(\\\"MyToken\\\");\\n *     }\\n * }\\n * ```\\n *\\n * TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as\\n * possible by providing the encoded function call as the `_data` argument to {ERC1967Proxy-constructor}.\\n *\\n * CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure\\n * that all initializers are idempotent. This is not verified automatically as constructors are by Solidity.\\n *\\n * [CAUTION]\\n * ====\\n * Avoid leaving a contract uninitialized.\\n *\\n * An uninitialized contract can be taken over by an attacker. This applies to both a proxy and its implementation\\n * contract, which may impact the proxy. To prevent the implementation contract from being used, you should invoke\\n * the {_disableInitializers} function in the constructor to automatically lock it when it is deployed:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```\\n * /// @custom:oz-upgrades-unsafe-allow constructor\\n * constructor() {\\n *     _disableInitializers();\\n * }\\n * ```\\n * ====\\n */\\nabstract contract Initializable {\\n    /**\\n     * @dev Storage of the initializable contract.\\n     *\\n     * It's implemented on a custom ERC-7201 namespace to reduce the risk of storage collisions\\n     * when using with upgradeable contracts.\\n     *\\n     * @custom:storage-location erc7201:openzeppelin.storage.Initializable\\n     */\\n    struct InitializableStorage {\\n        /**\\n         * @dev Indicates that the contract has been initialized.\\n         */\\n        uint64 _initialized;\\n        /**\\n         * @dev Indicates that the contract is in the process of being initialized.\\n         */\\n        bool _initializing;\\n    }\\n\\n    // keccak256(abi.encode(uint256(keccak256(\\\"openzeppelin.storage.Initializable\\\")) - 1)) & ~bytes32(uint256(0xff))\\n    bytes32 private constant INITIALIZABLE_STORAGE = 0xf0c57e16840df040f15088dc2f81fe391c3923bec73e23a9662efc9c229c6a00;\\n\\n    /**\\n     * @dev The contract is already initialized.\\n     */\\n    error InvalidInitialization();\\n\\n    /**\\n     * @dev The contract is not initializing.\\n     */\\n    error NotInitializing();\\n\\n    /**\\n     * @dev Triggered when the contract has been initialized or reinitialized.\\n     */\\n    event Initialized(uint64 version);\\n\\n    /**\\n     * @dev A modifier that defines a protected initializer function that can be invoked at most once. In its scope,\\n     * `onlyInitializing` functions can be used to initialize parent contracts.\\n     *\\n     * Similar to `reinitializer(1)`, except that in the context of a constructor an `initializer` may be invoked any\\n     * number of times. This behavior in the constructor can be useful during testing and is not expected to be used in\\n     * production.\\n     *\\n     * Emits an {Initialized} event.\\n     */\\n    modifier initializer() {\\n        // solhint-disable-next-line var-name-mixedcase\\n        InitializableStorage storage $ = _getInitializableStorage();\\n\\n        // Cache values to avoid duplicated sloads\\n        bool isTopLevelCall = !$._initializing;\\n        uint64 initialized = $._initialized;\\n\\n        // Allowed calls:\\n        // - initialSetup: the contract is not in the initializing state and no previous version was\\n        //                 initialized\\n        // - construction: the contract is initialized at version 1 (no reininitialization) and the\\n        //                 current contract is just being deployed\\n        bool initialSetup = initialized == 0 && isTopLevelCall;\\n        bool construction = initialized == 1 && address(this).code.length == 0;\\n\\n        if (!initialSetup && !construction) {\\n            revert InvalidInitialization();\\n        }\\n        $._initialized = 1;\\n        if (isTopLevelCall) {\\n            $._initializing = true;\\n        }\\n        _;\\n        if (isTopLevelCall) {\\n            $._initializing = false;\\n            emit Initialized(1);\\n        }\\n    }\\n\\n    /**\\n     * @dev A modifier that defines a protected reinitializer function that can be invoked at most once, and only if the\\n     * contract hasn't been initialized to a greater version before. In its scope, `onlyInitializing` functions can be\\n     * used to initialize parent contracts.\\n     *\\n     * A reinitializer may be used after the original initialization step. This is essential to configure modules that\\n     * are added through upgrades and that require initialization.\\n     *\\n     * When `version` is 1, this modifier is similar to `initializer`, except that functions marked with `reinitializer`\\n     * cannot be nested. If one is invoked in the context of another, execution will revert.\\n     *\\n     * Note that versions can jump in increments greater than 1; this implies that if multiple reinitializers coexist in\\n     * a contract, executing them in the right order is up to the developer or operator.\\n     *\\n     * WARNING: Setting the version to 2**64 - 1 will prevent any future reinitialization.\\n     *\\n     * Emits an {Initialized} event.\\n     */\\n    modifier reinitializer(uint64 version) {\\n        // solhint-disable-next-line var-name-mixedcase\\n        InitializableStorage storage $ = _getInitializableStorage();\\n\\n        if ($._initializing || $._initialized >= version) {\\n            revert InvalidInitialization();\\n        }\\n        $._initialized = version;\\n        $._initializing = true;\\n        _;\\n        $._initializing = false;\\n        emit Initialized(version);\\n    }\\n\\n    /**\\n     * @dev Modifier to protect an initialization function so that it can only be invoked by functions with the\\n     * {initializer} and {reinitializer} modifiers, directly or indirectly.\\n     */\\n    modifier onlyInitializing() {\\n        _checkInitializing();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Reverts if the contract is not in an initializing state. See {onlyInitializing}.\\n     */\\n    function _checkInitializing() internal view virtual {\\n        if (!_isInitializing()) {\\n            revert NotInitializing();\\n        }\\n    }\\n\\n    /**\\n     * @dev Locks the contract, preventing any future reinitialization. This cannot be part of an initializer call.\\n     * Calling this in the constructor of a contract will prevent that contract from being initialized or reinitialized\\n     * to any version. It is recommended to use this to lock implementation contracts that are designed to be called\\n     * through proxies.\\n     *\\n     * Emits an {Initialized} event the first time it is successfully executed.\\n     */\\n    function _disableInitializers() internal virtual {\\n        // solhint-disable-next-line var-name-mixedcase\\n        InitializableStorage storage $ = _getInitializableStorage();\\n\\n        if ($._initializing) {\\n            revert InvalidInitialization();\\n        }\\n        if ($._initialized != type(uint64).max) {\\n            $._initialized = type(uint64).max;\\n            emit Initialized(type(uint64).max);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the highest version that has been initialized. See {reinitializer}.\\n     */\\n    function _getInitializedVersion() internal view returns (uint64) {\\n        return _getInitializableStorage()._initialized;\\n    }\\n\\n    /**\\n     * @dev Returns `true` if the contract is currently initializing. See {onlyInitializing}.\\n     */\\n    function _isInitializing() internal view returns (bool) {\\n        return _getInitializableStorage()._initializing;\\n    }\\n\\n    /**\\n     * @dev Returns a pointer to the storage namespace.\\n     */\\n    // solhint-disable-next-line var-name-mixedcase\\n    function _getInitializableStorage() private pure returns (InitializableStorage storage $) {\\n        assembly {\\n            $.slot := INITIALIZABLE_STORAGE\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x631188737069917d2f909d29ce62c4d48611d326686ba6683e26b72a23bfac0b\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the value of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the value of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves a `value` amount of tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 value) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets a `value` amount of tokens as the allowance of `spender` over the\\n     * caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 value) external returns (bool);\\n\\n    /**\\n     * @dev Moves a `value` amount of tokens from `from` to `to` using the\\n     * allowance mechanism. `value` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address from, address to, uint256 value) external returns (bool);\\n}\\n\",\"keccak256\":\"0xc6a8ff0ea489379b61faa647490411b80102578440ab9d84e9a957cc12164e70\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (token/ERC20/extensions/IERC20Metadata.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {IERC20} from \\\"../IERC20.sol\\\";\\n\\n/**\\n * @dev Interface for the optional metadata functions from the ERC20 standard.\\n */\\ninterface IERC20Metadata is IERC20 {\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the symbol of the token.\\n     */\\n    function symbol() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the decimals places of the token.\\n     */\\n    function decimals() external view returns (uint8);\\n}\\n\",\"keccak256\":\"0xaa761817f6cd7892fcf158b3c776b34551cde36f48ff9703d53898bc45a94ea2\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/extensions/IERC20Permit.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (token/ERC20/extensions/IERC20Permit.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Interface of the ERC20 Permit extension allowing approvals to be made via signatures, as defined in\\n * https://eips.ethereum.org/EIPS/eip-2612[EIP-2612].\\n *\\n * Adds the {permit} method, which can be used to change an account's ERC20 allowance (see {IERC20-allowance}) by\\n * presenting a message signed by the account. By not relying on {IERC20-approve}, the token holder account doesn't\\n * need to send a transaction, and thus is not required to hold Ether at all.\\n *\\n * ==== Security Considerations\\n *\\n * There are two important considerations concerning the use of `permit`. The first is that a valid permit signature\\n * expresses an allowance, and it should not be assumed to convey additional meaning. In particular, it should not be\\n * considered as an intention to spend the allowance in any specific way. The second is that because permits have\\n * built-in replay protection and can be submitted by anyone, they can be frontrun. A protocol that uses permits should\\n * take this into consideration and allow a `permit` call to fail. Combining these two aspects, a pattern that may be\\n * generally recommended is:\\n *\\n * ```solidity\\n * function doThingWithPermit(..., uint256 value, uint256 deadline, uint8 v, bytes32 r, bytes32 s) public {\\n *     try token.permit(msg.sender, address(this), value, deadline, v, r, s) {} catch {}\\n *     doThing(..., value);\\n * }\\n *\\n * function doThing(..., uint256 value) public {\\n *     token.safeTransferFrom(msg.sender, address(this), value);\\n *     ...\\n * }\\n * ```\\n *\\n * Observe that: 1) `msg.sender` is used as the owner, leaving no ambiguity as to the signer intent, and 2) the use of\\n * `try/catch` allows the permit to fail and makes the code tolerant to frontrunning. (See also\\n * {SafeERC20-safeTransferFrom}).\\n *\\n * Additionally, note that smart contract wallets (such as Argent or Safe) are not able to produce permit signatures, so\\n * contracts should have entry points that don't rely on permit.\\n */\\ninterface IERC20Permit {\\n    /**\\n     * @dev Sets `value` as the allowance of `spender` over ``owner``'s tokens,\\n     * given ``owner``'s signed approval.\\n     *\\n     * IMPORTANT: The same issues {IERC20-approve} has related to transaction\\n     * ordering also apply here.\\n     *\\n     * Emits an {Approval} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     * - `deadline` must be a timestamp in the future.\\n     * - `v`, `r` and `s` must be a valid `secp256k1` signature from `owner`\\n     * over the EIP712-formatted function arguments.\\n     * - the signature must use ``owner``'s current nonce (see {nonces}).\\n     *\\n     * For more information on the signature format, see the\\n     * https://eips.ethereum.org/EIPS/eip-2612#specification[relevant EIP\\n     * section].\\n     *\\n     * CAUTION: See Security Considerations above.\\n     */\\n    function permit(\\n        address owner,\\n        address spender,\\n        uint256 value,\\n        uint256 deadline,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) external;\\n\\n    /**\\n     * @dev Returns the current nonce for `owner`. This value must be\\n     * included whenever a signature is generated for {permit}.\\n     *\\n     * Every successful call to {permit} increases ``owner``'s nonce by one. This\\n     * prevents a signature from being used multiple times.\\n     */\\n    function nonces(address owner) external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the domain separator used in the encoding of the signature for {permit}, as defined by {EIP712}.\\n     */\\n    // solhint-disable-next-line func-name-mixedcase\\n    function DOMAIN_SEPARATOR() external view returns (bytes32);\\n}\\n\",\"keccak256\":\"0x6008dabfe393240d73d7dd7688033f72740d570aa422254d29a7dce8568f3aff\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (token/ERC20/utils/SafeERC20.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {IERC20} from \\\"../IERC20.sol\\\";\\nimport {IERC20Permit} from \\\"../extensions/IERC20Permit.sol\\\";\\nimport {Address} from \\\"../../../utils/Address.sol\\\";\\n\\n/**\\n * @title SafeERC20\\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\\n * contract returns false). Tokens that return no value (and instead revert or\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\n * successful.\\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n */\\nlibrary SafeERC20 {\\n    using Address for address;\\n\\n    /**\\n     * @dev An operation with an ERC20 token failed.\\n     */\\n    error SafeERC20FailedOperation(address token);\\n\\n    /**\\n     * @dev Indicates a failed `decreaseAllowance` request.\\n     */\\n    error SafeERC20FailedDecreaseAllowance(address spender, uint256 currentAllowance, uint256 requestedDecrease);\\n\\n    /**\\n     * @dev Transfer `value` amount of `token` from the calling contract to `to`. If `token` returns no value,\\n     * non-reverting calls are assumed to be successful.\\n     */\\n    function safeTransfer(IERC20 token, address to, uint256 value) internal {\\n        _callOptionalReturn(token, abi.encodeCall(token.transfer, (to, value)));\\n    }\\n\\n    /**\\n     * @dev Transfer `value` amount of `token` from `from` to `to`, spending the approval given by `from` to the\\n     * calling contract. If `token` returns no value, non-reverting calls are assumed to be successful.\\n     */\\n    function safeTransferFrom(IERC20 token, address from, address to, uint256 value) internal {\\n        _callOptionalReturn(token, abi.encodeCall(token.transferFrom, (from, to, value)));\\n    }\\n\\n    /**\\n     * @dev Increase the calling contract's allowance toward `spender` by `value`. If `token` returns no value,\\n     * non-reverting calls are assumed to be successful.\\n     */\\n    function safeIncreaseAllowance(IERC20 token, address spender, uint256 value) internal {\\n        uint256 oldAllowance = token.allowance(address(this), spender);\\n        forceApprove(token, spender, oldAllowance + value);\\n    }\\n\\n    /**\\n     * @dev Decrease the calling contract's allowance toward `spender` by `requestedDecrease`. If `token` returns no\\n     * value, non-reverting calls are assumed to be successful.\\n     */\\n    function safeDecreaseAllowance(IERC20 token, address spender, uint256 requestedDecrease) internal {\\n        unchecked {\\n            uint256 currentAllowance = token.allowance(address(this), spender);\\n            if (currentAllowance < requestedDecrease) {\\n                revert SafeERC20FailedDecreaseAllowance(spender, currentAllowance, requestedDecrease);\\n            }\\n            forceApprove(token, spender, currentAllowance - requestedDecrease);\\n        }\\n    }\\n\\n    /**\\n     * @dev Set the calling contract's allowance toward `spender` to `value`. If `token` returns no value,\\n     * non-reverting calls are assumed to be successful. Meant to be used with tokens that require the approval\\n     * to be set to zero before setting it to a non-zero value, such as USDT.\\n     */\\n    function forceApprove(IERC20 token, address spender, uint256 value) internal {\\n        bytes memory approvalCall = abi.encodeCall(token.approve, (spender, value));\\n\\n        if (!_callOptionalReturnBool(token, approvalCall)) {\\n            _callOptionalReturn(token, abi.encodeCall(token.approve, (spender, 0)));\\n            _callOptionalReturn(token, approvalCall);\\n        }\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     */\\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We use {Address-functionCall} to perform this call, which verifies that\\n        // the target address contains contract code and also asserts for success in the low-level call.\\n\\n        bytes memory returndata = address(token).functionCall(data);\\n        if (returndata.length != 0 && !abi.decode(returndata, (bool))) {\\n            revert SafeERC20FailedOperation(address(token));\\n        }\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     *\\n     * This is a variant of {_callOptionalReturn} that silents catches all reverts and returns a bool instead.\\n     */\\n    function _callOptionalReturnBool(IERC20 token, bytes memory data) private returns (bool) {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We cannot use {Address-functionCall} here since this should return false\\n        // and not revert is the subcall reverts.\\n\\n        (bool success, bytes memory returndata) = address(token).call(data);\\n        return success && (returndata.length == 0 || abi.decode(returndata, (bool))) && address(token).code.length > 0;\\n    }\\n}\\n\",\"keccak256\":\"0x37bb49513c49c87c4642a891b13b63571bc87013dde806617aa1efb54605f386\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev The ETH balance of the account is not enough to perform the operation.\\n     */\\n    error AddressInsufficientBalance(address account);\\n\\n    /**\\n     * @dev There's no code at `target` (it is not a contract).\\n     */\\n    error AddressEmptyCode(address target);\\n\\n    /**\\n     * @dev A call to an address target failed. The target may have reverted.\\n     */\\n    error FailedInnerCall();\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://consensys.net/diligence/blog/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.8.20/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        if (address(this).balance < amount) {\\n            revert AddressInsufficientBalance(address(this));\\n        }\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        if (!success) {\\n            revert FailedInnerCall();\\n        }\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason or custom error, it is bubbled\\n     * up by this function (like regular Solidity function calls). However, if\\n     * the call reverted with no returned reason, this function reverts with a\\n     * {FailedInnerCall} error.\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\\n        if (address(this).balance < value) {\\n            revert AddressInsufficientBalance(address(this));\\n        }\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResultFromTarget(target, success, returndata);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResultFromTarget(target, success, returndata);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResultFromTarget(target, success, returndata);\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call to smart-contract was successful, and reverts if the target\\n     * was not a contract or bubbling up the revert reason (falling back to {FailedInnerCall}) in case of an\\n     * unsuccessful call.\\n     */\\n    function verifyCallResultFromTarget(\\n        address target,\\n        bool success,\\n        bytes memory returndata\\n    ) internal view returns (bytes memory) {\\n        if (!success) {\\n            _revert(returndata);\\n        } else {\\n            // only check if target is a contract if the call was successful and the return data is empty\\n            // otherwise we already know that it was a contract\\n            if (returndata.length == 0 && target.code.length == 0) {\\n                revert AddressEmptyCode(target);\\n            }\\n            return returndata;\\n        }\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call was successful, and reverts if it wasn't, either by bubbling the\\n     * revert reason or with a default {FailedInnerCall} error.\\n     */\\n    function verifyCallResult(bool success, bytes memory returndata) internal pure returns (bytes memory) {\\n        if (!success) {\\n            _revert(returndata);\\n        } else {\\n            return returndata;\\n        }\\n    }\\n\\n    /**\\n     * @dev Reverts with returndata if present. Otherwise reverts with {FailedInnerCall}.\\n     */\\n    function _revert(bytes memory returndata) private pure {\\n        // Look for revert reason and bubble it up if present\\n        if (returndata.length > 0) {\\n            // The easiest way to bubble the revert reason is using memory via assembly\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                let returndata_size := mload(returndata)\\n                revert(add(32, returndata), returndata_size)\\n            }\\n        } else {\\n            revert FailedInnerCall();\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xaf28a975a78550e45f65e559a3ad6a5ad43b9b8a37366999abd1b7084eb70721\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/StorageSlot.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/StorageSlot.sol)\\n// This file was procedurally generated from scripts/generate/templates/StorageSlot.js.\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Library for reading and writing primitive types to specific storage slots.\\n *\\n * Storage slots are often used to avoid storage conflict when dealing with upgradeable contracts.\\n * This library helps with reading and writing to such slots without the need for inline assembly.\\n *\\n * The functions in this library return Slot structs that contain a `value` member that can be used to read or write.\\n *\\n * Example usage to set ERC1967 implementation slot:\\n * ```solidity\\n * contract ERC1967 {\\n *     bytes32 internal constant _IMPLEMENTATION_SLOT = 0x360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc;\\n *\\n *     function _getImplementation() internal view returns (address) {\\n *         return StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value;\\n *     }\\n *\\n *     function _setImplementation(address newImplementation) internal {\\n *         require(newImplementation.code.length > 0);\\n *         StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value = newImplementation;\\n *     }\\n * }\\n * ```\\n */\\nlibrary StorageSlot {\\n    struct AddressSlot {\\n        address value;\\n    }\\n\\n    struct BooleanSlot {\\n        bool value;\\n    }\\n\\n    struct Bytes32Slot {\\n        bytes32 value;\\n    }\\n\\n    struct Uint256Slot {\\n        uint256 value;\\n    }\\n\\n    struct StringSlot {\\n        string value;\\n    }\\n\\n    struct BytesSlot {\\n        bytes value;\\n    }\\n\\n    /**\\n     * @dev Returns an `AddressSlot` with member `value` located at `slot`.\\n     */\\n    function getAddressSlot(bytes32 slot) internal pure returns (AddressSlot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `BooleanSlot` with member `value` located at `slot`.\\n     */\\n    function getBooleanSlot(bytes32 slot) internal pure returns (BooleanSlot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `Bytes32Slot` with member `value` located at `slot`.\\n     */\\n    function getBytes32Slot(bytes32 slot) internal pure returns (Bytes32Slot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `Uint256Slot` with member `value` located at `slot`.\\n     */\\n    function getUint256Slot(bytes32 slot) internal pure returns (Uint256Slot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `StringSlot` with member `value` located at `slot`.\\n     */\\n    function getStringSlot(bytes32 slot) internal pure returns (StringSlot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `StringSlot` representation of the string storage pointer `store`.\\n     */\\n    function getStringSlot(string storage store) internal pure returns (StringSlot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := store.slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `BytesSlot` with member `value` located at `slot`.\\n     */\\n    function getBytesSlot(bytes32 slot) internal pure returns (BytesSlot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `BytesSlot` representation of the bytes storage pointer `store`.\\n     */\\n    function getBytesSlot(bytes storage store) internal pure returns (BytesSlot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := store.slot\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x32ba59b4b7299237c8ba56319110989d7978a039faf754793064e967e5894418\",\"license\":\"MIT\"},\"contracts/YarLib.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\npragma solidity 0.8.20;\\n\\nlibrary YarLib {\\n    struct YarTX {\\n        uint256 initialChainId;\\n        address sender;\\n        address payer;\\n        uint256 targetChainId;\\n        address target;\\n        uint256 value;\\n        bytes data;\\n    }\\n}\\n\",\"keccak256\":\"0x2c48526e1e501dfd1203490b31fbe68074728ac2ffdadde1b187f02b98ff3e26\",\"license\":\"UNLICENSED\"},\"contracts/YarRequest.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\npragma solidity 0.8.20;\\n\\nimport { IERC20 } from \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport { SafeERC20 } from \\\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\\\";\\n// import { ReentrancyGuard } from \\\"@openzeppelin/contracts/utils/ReentrancyGuard.sol\\\";\\n// import { ERC2771Context } from \\\"@openzeppelin/contracts/metatx/ERC2771Context.sol\\\";\\n// import { SignatureChecker } from \\\"@openzeppelin/contracts/utils/cryptography/SignatureChecker.sol\\\";\\n// import { EIP712 } from \\\"@openzeppelin/contracts/utils/cryptography/EIP712.sol\\\";\\n// import { Nonces } from \\\"@openzeppelin/contracts/utils/Nonces.sol\\\";\\nimport { YarLib } from \\\"./YarLib.sol\\\";\\n// import \\\"hardhat/console.sol\\\";\\ncontract YarRequest \\n// is EIP712, Nonces, ERC2771Context, ReentrancyGuard \\n{\\n    using SafeERC20 for IERC20;\\n\\n    address public relayer;\\n    address public feeToken;\\n\\n    // string private constant PERMIT_TYPE =\\n    //     \\\"Permit(uint256 nonce,uint256 signatureExpired,YarTX yarTX)\\\";\\n    // string private constant CROSS_CALL_DATA_TYPE =\\n    //     \\\"YarTX(uint256 initialChainId,address sender,address app,uint256 targetChainId,address target,uint256 value,bytes data,uint256 depositToYarAmount)\\\";\\n\\n    // bytes32 private constant PERMIT_TYPEHASH =\\n    //     keccak256(abi.encodePacked(PERMIT_TYPE, CROSS_CALL_DATA_TYPE));\\n\\n    // bytes32 private constant CROSS_CALL_DATA_TYPEHASH =\\n    //     keccak256(abi.encodePacked(CROSS_CALL_DATA_TYPE));\\n\\n    mapping(address sender => mapping(address app => mapping(bytes32 yarTxHash => bool approved)))\\n        public approvals;\\n\\n    event Send(YarLib.YarTX yarTx);\\n\\n    event Deposit(address depositor, address feesToken, uint256 amount);\\n\\n    event Approve(address account, uint256 initialChainId, address spender, uint256 amount);\\n\\n    constructor(\\n        // address intialYarForwarder,\\n        address intialRelayer,\\n        address initailFeeToken\\n    ) \\n    // EIP712(\\\"YarRequest\\\", \\\"1\\\") ERC2771Context(intialYarForwarder) \\n    {\\n        relayer = intialRelayer;\\n        feeToken = initailFeeToken;\\n    }\\n\\n    function deposit(uint256 amount) public payable {\\n        if (feeToken == address(0)) {\\n            require(msg.value == amount, \\\"amount!\\\");\\n            (bool success, bytes memory result) = relayer.call{ value: amount }(\\\"\\\");\\n            if (success == false) {\\n                assembly {\\n                    revert(add(result, 32), mload(result))\\n                }\\n            }\\n        } else {\\n            IERC20(feeToken).safeTransferFrom(msg.sender, relayer, amount);\\n        }\\n        emit Deposit(msg.sender, feeToken, amount);\\n    }\\n\\n    function approve(address spender, uint256 amount) public {\\n        emit Approve(msg.sender, block.chainid, spender, amount);\\n    }\\n\\n    // function approveAndCallApp(\\n    //     bytes calldata appData,\\n    //     YarLib.YarTX calldata yarTX\\n    // ) external payable {\\n    //     require(yarTX.app != address(this), \\\"self call disabled!\\\");\\n    //     approve(yarTX);\\n    //     (bool success, bytes memory result) = yarTX.app.call{ value: msg.value }(\\n    //         appData\\n    //     );\\n    //     if (success == false) {\\n    //         assembly {\\n    //             revert(add(result, 32), mload(result))\\n    //         }\\n    //     }\\n    // }\\n\\n    // function approveDeposit(address ) public {\\n    //     require(yarTX.sender == msg.sender, \\\"only sender!\\\");\\n    //     _approve(yarTX);\\n    // }\\n\\n    // function approve(YarLib.YarTX calldata yarTX) public {\\n    //     require(yarTX.sender == msg.sender, \\\"only sender!\\\");\\n    //     _approve(yarTX);\\n    // }\\n\\n    // function _approve(YarLib.YarTX calldata yarTX) internal {\\n    //     approvals[yarTX.sender][yarTX.app][keccak256(abi.encode(yarTX))] = true;\\n    // }\\n\\n    // function sendFrom(YarLib.YarTX calldata yarTX) external payable {\\n    //     address sender = yarTX.sender;\\n    //     address app = yarTX.app;\\n\\n    //     require(app == msg.sender, \\\"app != msg.sender\\\");\\n\\n    //     bytes32 yarTxHash = keccak256(abi.encode(yarTX));\\n    //     require(approvals[sender][app][yarTxHash], \\\"not approved!\\\");\\n    //     delete approvals[sender][app][yarTxHash];\\n\\n    //     _send(yarTX);\\n    // }\\n\\n    // function permit(\\n    //     YarLib.YarTX calldata yarTX,\\n    //     uint256 signatureExpired,\\n    //     bytes calldata signature\\n    // ) external {\\n    //     require(block.timestamp < signatureExpired, \\\"signatureExpired!\\\");\\n\\n    //     bytes32 structHash = keccak256(\\n    //         abi.encode(\\n    //             PERMIT_TYPEHASH,\\n    //             _useNonce(yarTX.sender),\\n    //             signatureExpired,\\n    //             keccak256(\\n    //                 abi.encode(\\n    //                     CROSS_CALL_DATA_TYPEHASH,\\n    //                     yarTX.initialChainId,\\n    //                     yarTX.sender,\\n    //                     yarTX.app,\\n    //                     yarTX.targetChainId,\\n    //                     yarTX.target,\\n    //                     yarTX.value,\\n    //                     keccak256(yarTX.data),\\n    //                     yarTX.depositToYarAmount\\n    //                 )\\n    //             )\\n    //         )\\n    //     );\\n    //     require(\\n    //         SignatureChecker.isValidSignatureNow(\\n    //             yarTX.sender,\\n    //             _hashTypedDataV4(structHash),\\n    //             signature\\n    //         ),\\n    //         \\\"signature!\\\"\\n    //     );\\n    //     _approve(yarTX);\\n    // }\\n\\n    // function send(YarLib.YarTX calldata yarTX) external payable {\\n    //     address sender = msg.sender;\\n\\n    //     require(yarTX.sender == sender, \\\"sender!\\\");\\n    //     require(yarTX.app == sender, \\\"app != sender\\\");\\n\\n    //     _send(yarTX);\\n    // }\\n\\n    // function _send(YarLib.YarTX memory yarTX) internal {\\n    //     require(yarTX.initialChainId == block.chainid, \\\"initialChainId!\\\");\\n    //     require(yarTX.targetChainId != block.chainid, \\\"targetChainId!\\\");\\n\\n    //     if (yarTX.depositToYarAmount > 0) {\\n    //         deposit(yarTX.sender, yarTX.depositToYarAmount);\\n    //     }\\n    //     emit Send(yarTX);\\n    // }\\n\\n    function send(YarLib.YarTX memory yarTX) external returns(YarLib.YarTX memory){\\n        require(yarTX.sender == msg.sender, \\\"sender!\\\");\\n        require(yarTX.initialChainId == block.chainid, \\\"initialChainId!\\\");\\n        require(yarTX.targetChainId != block.chainid, \\\"targetChainId!\\\");\\n\\n        // if (yarTX.depositToYarAmount > 0) {\\n        //     deposit(yarTX.sender, yarTX.depositToYarAmount);\\n        // }\\n        emit Send(yarTX);\\n\\n        return yarTX;\\n    }\\n}\\n\",\"keccak256\":\"0x8b1a2f453f4fdc58fad23737dfaf7975064506321c1e6b1a41edd284e120e238\",\"license\":\"UNLICENSED\"},\"contracts/YarResponse.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\npragma solidity 0.8.20;\\n\\nimport { YarLib } from \\\"./YarLib.sol\\\";\\n\\ncontract YarResponse {\\n    address public relayer;\\n\\n    YarLib.YarTX internal _trustedYarTx;\\n\\n    function trustedYarTx() external view returns (YarLib.YarTX memory) {\\n        return _trustedYarTx;\\n    }\\n\\n    constructor(address intialRelayer) {\\n        relayer = intialRelayer;\\n    }\\n\\n    function deliver(YarLib.YarTX calldata yarTx) external payable {\\n        require(msg.sender == relayer, \\\"only relayer!\\\");\\n        require(yarTx.value == msg.value, \\\"msg.value!\\\");\\n\\n        _trustedYarTx = yarTx;\\n\\n        (bool success, bytes memory result) = yarTx.target.call{ value: yarTx.value }(yarTx.data);\\n        if (success == false) {\\n            assembly {\\n                revert(add(result, 32), mload(result))\\n            }\\n        }\\n\\n        delete _trustedYarTx;\\n    }\\n}\\n\",\"keccak256\":\"0xc5781ca75b8096b94ed55748f91a9a084dcdc09e68e90104ef314e61c16e82be\",\"license\":\"UNLICENSED\"},\"contracts/apps/bridge20/BridgedEIP20.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\r\\npragma solidity 0.8.20;\\r\\n\\r\\nimport { ERC20Upgradeable } from \\\"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\\\";\\r\\nimport { OwnableUpgradeable } from \\\"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\\\";\\r\\nimport { Initializable } from \\\"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\\\";\\r\\n\\r\\ncontract BridgedEIP20 is Initializable, ERC20Upgradeable, OwnableUpgradeable {\\r\\n    uint256 public originalChain;\\r\\n    address public originalToken;\\r\\n    uint8 internal originalTokenDecimals;\\r\\n    string public originalTokenName;\\r\\n    string public originalTokenSymbol;\\r\\n\\r\\n    function initialize(\\r\\n        uint256 _originalChain,\\r\\n        address _originalToken,\\r\\n        string memory _originalTokenName,\\r\\n        string memory _originalTokenSymbol,\\r\\n        uint8 _originalTokenDecimals\\r\\n    ) external initializer {\\r\\n\\r\\n        ERC20Upgradeable.__ERC20_init(\\r\\n            string(abi.encodePacked(\\\"y\\\", _originalTokenName)),\\r\\n            string(abi.encodePacked(\\\"y\\\", _originalTokenSymbol))\\r\\n        );\\r\\n        OwnableUpgradeable.__Ownable_init(msg.sender);\\r\\n        originalTokenName = _originalTokenName;\\r\\n        originalTokenSymbol = _originalTokenSymbol;\\r\\n        originalChain = _originalChain;\\r\\n        originalToken = _originalToken;\\r\\n        originalTokenDecimals = _originalTokenDecimals;\\r\\n    }\\r\\n\\r\\n    function getOriginalTokenInfo() external view returns (uint256, address, string memory, string memory, uint8) {\\r\\n        return (originalChain, originalToken, originalTokenName, originalTokenSymbol, decimals());\\r\\n    }\\r\\n\\r\\n    function mint(address _recipient, uint256 _amount) external onlyOwner {\\r\\n        _mint(_recipient, _amount);\\r\\n    }\\r\\n\\r\\n    function burn(address _from, uint256 _amount) external onlyOwner {\\r\\n        _burn(_from, _amount);\\r\\n    }\\r\\n\\r\\n    function permissionedTransferFrom(\\r\\n        address from,\\r\\n        address to,\\r\\n        uint256 amount\\r\\n    ) external onlyOwner {\\r\\n        _transfer(from, to, amount);\\r\\n    }\\r\\n\\r\\n    function decimals() public view virtual override returns (uint8) {\\r\\n        return originalTokenDecimals;\\r\\n    }\\r\\n}\\r\\n\",\"keccak256\":\"0xbcdd89e66a1d4ccacd49f482aa88ae336089b23a793ccd349bf9d81dcdfee868\",\"license\":\"UNLICENSED\"},\"contracts/apps/bridge20/ERC1967ProxyInitializable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (proxy/ERC1967/ERC1967Proxy.sol)\\npragma solidity 0.8.20;\\n\\nimport {Proxy} from \\\"@openzeppelin/contracts/proxy/Proxy.sol\\\";\\nimport {ERC1967Utils} from \\\"@openzeppelin/contracts/proxy/ERC1967/ERC1967Utils.sol\\\";\\nimport {Initializable } from \\\"@openzeppelin/contracts/proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev This contract implements an upgradeable proxy. It is upgradeable because calls are delegated to an\\n * implementation address that can be changed. This address is stored in storage in the location specified by\\n * https://eips.ethereum.org/EIPS/eip-1967[EIP1967], so that it doesn't conflict with the storage layout of the\\n * implementation behind the proxy.\\n */\\ncontract ERC1967ProxyInitializable is Proxy {\\n    /**\\n     * @dev Initializes the upgradeable proxy with an initial implementation specified by `implementation`.\\n     *\\n     * If `_data` is nonempty, it's used as data in a delegate call to `implementation`. This will typically be an\\n     * encoded function call, and allows initializing the storage of the proxy like a Solidity constructor.\\n     *\\n     * Requirements:\\n     *\\n     * - If `data` is empty, `msg.value` must be zero.\\n     */\\n\\n    bool alreadyInit;\\n\\n    function init(address implementation, bytes memory _data) public {\\n        require(alreadyInit == false, \\\"alreadyInit!\\\");\\n        alreadyInit = true;\\n        ERC1967Utils.upgradeToAndCall(implementation, _data);\\n    }\\n\\n    /**\\n     * @dev Returns the current implementation address.\\n     *\\n     * TIP: To get this value clients can read directly from the storage slot shown below (specified by EIP1967) using\\n     * the https://eth.wiki/json-rpc/API#eth_getstorageat[`eth_getStorageAt`] RPC call.\\n     * `0x360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc`\\n     */\\n    function _implementation() internal view virtual override returns (address) {\\n        return ERC1967Utils.getImplementation();\\n    }\\n}\\n\",\"keccak256\":\"0x501448c76269b85dd5828cd7bc31b89ef48829693c17df6a3091ddf78a1d2046\",\"license\":\"MIT\"},\"contracts/apps/bridge20/YarBridge20.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\npragma solidity 0.8.20;\\n\\nimport { IERC20Metadata } from \\\"@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol\\\";\\nimport { SafeERC20 } from \\\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\\\";\\n\\nimport { YarLib } from \\\"../../YarLib.sol\\\";\\nimport { YarRequest } from \\\"../../YarRequest.sol\\\";\\nimport { YarResponse } from \\\"../../YarResponse.sol\\\";\\nimport { ERC1967ProxyInitializable } from \\\"./ERC1967ProxyInitializable.sol\\\";\\nimport { BridgedEIP20 } from \\\"./BridgedEIP20.sol\\\";\\n\\ncontract YarBridge20 {\\n    using SafeERC20 for IERC20Metadata;\\n\\n    address public owner;\\n\\n    address public yarRequest;\\n    address public yarResponse;\\n\\n    address public bridgedTokenImplementation;\\n\\n    mapping(address bridgedToken => bool exists) public isBridgedToken;\\n\\n    uint256 public chainId;\\n\\n    mapping(uint256 chainId => address peer) public peers;\\n\\n    string public nativeName;\\n    string public nativeSymbol;\\n    uint8 public nativeDecimals;\\n\\n    function setPeer(uint256 newChainId, address newPeer) external {\\n        require(msg.sender == owner, \\\"only owner!\\\");\\n        peers[newChainId] = newPeer;\\n    }\\n\\n    function getPeer(uint256 _chainId) public view returns (address) {\\n        address peer = peers[_chainId];\\n        return peer == address(0) ? address(this) : peer;\\n    }\\n\\n    constructor(\\n        string memory initialNativeName,\\n        string memory initialNativeSymbol,\\n        uint8 initialNativeDecimals,\\n        address intialYarRequest,\\n        address intialYarResponse\\n    ) {\\n        nativeName = initialNativeName;\\n        nativeSymbol = initialNativeSymbol;\\n        nativeDecimals = initialNativeDecimals;\\n        yarRequest = intialYarRequest;\\n        yarResponse = intialYarResponse;\\n        bridgedTokenImplementation = address(new BridgedEIP20());\\n        chainId = block.chainid;\\n        owner = msg.sender;\\n    }\\n\\n    function deployFrom(\\n        uint256 originalChainId,\\n        address originalToken,\\n        string calldata name,\\n        string calldata symbol,\\n        uint8 decimals\\n    ) external {\\n        require(msg.sender == yarResponse, \\\"only yarRequest!\\\");\\n\\n        address bridgedToken = getBridgedTokenAddress(originalChainId, originalToken);\\n        require(isBridgedToken[bridgedToken] == false, \\\"already exists!\\\");\\n\\n        _deployBridgedToken(originalChainId, originalToken, name, symbol, decimals);\\n    }\\n\\n    function deployTo(address token, uint256 targetChainId) external returns (YarLib.YarTX memory) {\\n        string memory name;\\n        string memory symbol;\\n        uint8 decimals;\\n        if (token == address(0)) {\\n            name = nativeName;\\n            symbol = nativeSymbol;\\n            decimals = nativeDecimals;\\n        } else {\\n            name = IERC20Metadata(token).name();\\n            symbol = IERC20Metadata(token).symbol();\\n            decimals = IERC20Metadata(token).decimals();\\n        }\\n\\n        uint256 originalChain;\\n        address originalToken;\\n        if (isBridgedToken[token]) {\\n            originalChain = BridgedEIP20(token).originalChain();\\n            originalToken = BridgedEIP20(token).originalToken();\\n        } else {\\n            originalChain = chainId;\\n            originalToken = token;\\n        }\\n\\n        YarLib.YarTX memory yarTx = YarLib.YarTX(\\n            chainId,\\n            address(this),\\n            msg.sender,\\n            targetChainId,\\n            getPeer(targetChainId),\\n            0,\\n            abi.encodeWithSelector(\\n                YarBridge20.deployFrom.selector,\\n                originalChain,\\n                originalToken,\\n                name,\\n                symbol,\\n                decimals\\n            )\\n        );\\n\\n        YarRequest(yarRequest).send(yarTx);\\n\\n        return yarTx;\\n    }\\n\\n    function transferFrom(\\n        uint256 originalChainId,\\n        address originalToken,\\n        uint256 amount,\\n        address recipient\\n    ) external {\\n        require(msg.sender == yarResponse, \\\"only yarResponse!\\\");\\n        YarLib.YarTX memory trustedYarTx = YarResponse(yarResponse).trustedYarTx();\\n        require(getPeer(trustedYarTx.initialChainId) == trustedYarTx.sender, \\\"not peer!\\\");\\n        if (originalChainId == chainId) {\\n            if (originalToken == address(0)) {\\n                (bool success, bytes memory result) = recipient.call{ value: amount }(\\\"\\\");\\n                if (success == false) {\\n                    assembly {\\n                        revert(add(result, 32), mload(result))\\n                    }\\n                }\\n            } else {\\n                IERC20Metadata(originalToken).safeTransfer(recipient, amount);\\n            }\\n        } else {\\n            address bridgedToken = getBridgedTokenAddress(originalChainId, originalToken);\\n            require(isBridgedToken[bridgedToken], \\\"before deploy bridged token!\\\");\\n            BridgedEIP20(bridgedToken).mint(recipient, amount);\\n        }\\n    }\\n\\n    function transferTo(\\n        address token,\\n        uint256 amount,\\n        uint256 targetChainId,\\n        address recipient\\n    ) external payable returns (YarLib.YarTX memory) {\\n        uint256 transferAmount = amount;\\n\\n        if (token == address(0)) {\\n            require(msg.value == transferAmount, \\\"transferAmount!\\\");\\n        } else {\\n            require(msg.value == 0, \\\"msg.value != 0\\\");\\n            IERC20Metadata(token).safeTransferFrom(msg.sender, address(this), transferAmount);\\n        }\\n\\n        bool _isBridgedToken = isBridgedToken[token];\\n\\n        uint256 originalChainId = _isBridgedToken ? BridgedEIP20(token).originalChain() : chainId;\\n        address originalToken = _isBridgedToken ? BridgedEIP20(token).originalToken() : token;\\n\\n        bytes memory targetTx = abi.encodeWithSelector(\\n            YarBridge20.transferFrom.selector,\\n            originalChainId,\\n            originalToken,\\n            amount,\\n            recipient\\n        );\\n\\n        YarLib.YarTX memory yarTX = YarLib.YarTX(\\n            chainId,\\n            address(this),\\n            msg.sender,\\n            targetChainId,\\n            getPeer(targetChainId),\\n            0,\\n            targetTx\\n        );\\n\\n        YarRequest(yarRequest).send(yarTX);\\n\\n        return yarTX;\\n    }\\n\\n    function getBridgedTokenAddress(\\n        uint256 originalChainId,\\n        address originalToken\\n    ) public view returns (address) {\\n        bytes32 salt = keccak256(abi.encodePacked(originalChainId, originalToken));\\n        return\\n            address(\\n                uint160(\\n                    uint(\\n                        keccak256(\\n                            abi.encodePacked(\\n                                bytes1(0xff),\\n                                address(this),\\n                                salt,\\n                                keccak256(\\n                                    abi.encodePacked(type(ERC1967ProxyInitializable).creationCode)\\n                                )\\n                            )\\n                        )\\n                    )\\n                )\\n            );\\n    }\\n\\n    function _deployBridgedToken(\\n        uint256 originalChainId,\\n        address originalToken,\\n        string calldata name,\\n        string calldata symbol,\\n        uint8 decimals\\n    ) internal returns (address) {\\n        bytes32 salt = keccak256(abi.encodePacked(originalChainId, originalToken));\\n        ERC1967ProxyInitializable bridgedToken = new ERC1967ProxyInitializable{ salt: salt }();\\n        bridgedToken.init(\\n            bridgedTokenImplementation,\\n            abi.encodeWithSelector(\\n                BridgedEIP20.initialize.selector,\\n                originalChainId,\\n                originalToken,\\n                name,\\n                symbol,\\n                decimals\\n            )\\n        );\\n\\n        address bridgedTokenAddress = address(bridgedToken);\\n        isBridgedToken[bridgedTokenAddress] = true;\\n        return bridgedTokenAddress;\\n    }\\n}\\n\",\"keccak256\":\"0x03b61df2f096993d424ce547ba4ff328ba2c77993fcb9ab95d5287232decbecd\",\"license\":\"UNLICENSED\"}},\"version\":1}",
  "bytecode": "0x608060405234620003cd576200359b803803806200001d81620003d2565b928339810160a082820312620003cd5781516001600160401b0390818111620003cd57826200004e918501620003f8565b6020928385015190838211620003cd576200006b918601620003f8565b60408501519060ff8216809203620003cd5762000099608062000091606089016200046a565b97016200046a565b948351858111620001ea57600754906001958683811c93168015620003c2575b84841014620002d4578190601f938481116200036b575b5084908483116001146200030157600092620002f5575b5050600019600383901b1c191690861b176007555b825192868411620001ea57600854928684811c94168015620002ea575b81851014620002d457838386951162000279575b50809284116001146200020c575060009262000200575b5050600019600383901b1c191690831b176008555b60ff19600954161760095560018060a01b039283918260018060a01b031996168682541617905516836002541617600255604051906116aa908183019083821090821117620001ea57829162001ef1833903906000f08015620001de57168160035416176003554660055533906000541617600055604051611a719081620004808239f35b6040513d6000823e3d90fd5b634e487b7160e01b600052604160045260246000fd5b01519050388062000144565b9190869450601f198416600860005283600020936000905b8282106200025f575050841162000245575b505050811b0160085562000159565b015160001960f88460031b161c1916905538808062000236565b848401518655899790950194938401939081019062000224565b90919293506008600052816000208480870160051c820192848810620002ca575b9187968a92969594930160051c01915b828110620002ba5750506200012d565b60008155879650899101620002aa565b925081926200029a565b634e487b7160e01b600052602260045260246000fd5b93607f169362000119565b015190503880620000e7565b90889350601f198316916007600052866000209260005b888282106200035457505084116200033a575b505050811b01600755620000fc565b015160001960f88460031b161c191690553880806200032b565b8385015186558c9790950194938401930162000318565b9091506007600052846000208480850160051c820192878610620003b8575b918a91869594930160051c01915b828110620003a8575050620000d0565b600081558594508a910162000398565b925081926200038a565b92607f1692620000b9565b600080fd5b6040519190601f01601f191682016001600160401b03811183821017620001ea57604052565b919080601f84011215620003cd5782516001600160401b038111620001ea576020906200042e601f8201601f19168301620003d2565b92818452828287010111620003cd5760005b8181106200045657508260009394955001015290565b858101830151848201840152820162000440565b51906001600160a01b0382168203620003cd5756fe6080604052600436101561001257600080fd5b60003560e01c806302e6d464146101275780630a4c6b7e1461012257806364996c9b1461011d57806367ebb6b2146101185780637078944c14610113578063768ea56a1461010e5780637fedad55146101095780638069c497146101045780638ca9ca8e146100ff5780638da5cb5b146100fa57806399f3f9f7146100f55780639a8a0592146100f0578063be4f3e8f146100eb578063c287e578146100e6578063dfe70cef146100e1578063e6a1496d146100dc5763f4100f00146100d757600080fd5b610ef2565b610ec9565b610ead565b610e6b565b610e37565b610e19565b610def565b610dc6565b610ca1565b610bdc565b610bac565b61096e565b610945565b61090a565b610610565b61039b565b610142565b6001600160a01b0381160361013d57565b600080fd5b3461013d57608036600319011261013d576004356024356101628161012c565b6044356064356101718161012c565b6002546001600160a01b039081169361018b338614611179565b60405195869563f0db1fbf60e01b87528660046000998a935afa9586156102c45787966101f09188916102cd575b50846101e86101dc60206101cd8551610f1b565b9401516001600160a01b031690565b6001600160a01b031690565b9116146111b9565b600554810361022f57501680610222575082809281925af161021061123d565b901561021a575080f35b602081519101fd5b61022c935061126d565b80f35b9061023d9195949395611469565b6001600160a01b038116600090815260046020526040902061026a90610265905b5460ff1690565b6111f1565b16803b156102c9576040516340c10f1960e01b81526001600160a01b0394909416600485015260248401919091528290604490829084905af180156102c4576102b1575080f35b806102be61022c926109a5565b8061093a565b61102d565b8280fd5b6102e991503d808a833e6102e181836109da565b8101906110dd565b386101b9565b60005b8381106103025750506000910152565b81810151838201526020016102f2565b9060209161032b815180928185528580860191016102ef565b601f01601f1916010190565b61010060c061039893602084528051602085015260018060a01b038060208301511660408601528060408301511660608601526060820151608086015260808201511660a085015260a08101518285015201519160e0808201520190610312565b90565b608036600319011261013d576004356103b38161012c565b60243560443591606435906103c78261012c565b6103cf610f5d565b506001600160a01b038116806105f5576103ea8434146113d2565b6001600160a01b038216600090815260046020526040902061040b9061025e565b9182156105ec576040516353638be560e01b8152602081600481865afa9081156102c4576000916105be575b50925b156105ae5750602060049160405192838092630e7c1cb560e01b82525afa9283156102c4576104be936104b092600091610580575b50945b60405162b9b51960e21b602082015260248101949094526001600160a01b0395861660448501526064840152909316608482015291829060a4820190565b03601f1981018352826109da565b6104fb600554926104ce81610f1b565b906104d7610f3d565b94855230602086015233604086015260608501526001600160a01b03166080840152565b600060a083015260c082015260015461051e906101dc906001600160a01b031681565b9060006040518093637d60955760e11b82528183816105408760048301610337565b03925af19182156102c45761056192610565575b5060405191829182610337565b0390f35b610579903d806000833e6102e181836109da565b5038610554565b6105a1915060203d81116105a7575b61059981836109da565b810190611068565b3861046f565b503d61058f565b6104b09150926104be9394610472565b6105df915060203d81116105e5575b6105d781836109da565b81019061104e565b38610437565b503d6105cd565b6005549261043a565b6105ff3415611395565b61060b84303384611410565b6103ea565b3461013d5760408060031936011261013d5760048035916106308361012c565b6024359161063c610f5d565b506001600160a01b0384169360008561082d57506106586109fc565b91610661610aef565b9161066e60095460ff1690565b905b6001600160a01b03811660009081526004602052604090206106919061025e565b15610811575084516353638be560e01b8152602094858285818c5afa9182156102c457849287916000916107f4575b5099885193848092630e7c1cb560e01b82525afa9182156102c45761079d9961072161075f9461072f9360009a8b926107d7575b5050955b600554986107058d610f1b565b958c51988995634654e54760e11b60208801526024870161107d565b03601f1981018552846109da565b610737610f3d565b9485523060208601529396879490338689015260608601526001600160a01b03166080850152565b60a0830184905260c0830152600154610782906101dc906001600160a01b031681565b90838551809881958294637d60955760e11b84528301610337565b03925af19283156102c457610561936107bc575b505191829182610337565b6107d0903d806000833e6102e181836109da565b50386107b1565b6107ed9250803d106105a75761059981836109da565b38806106f4565b61080b9150823d84116105e5576105d781836109da565b386106c0565b61079d975060009461072f61075f9261072160055491956106f8565b83516306fdde0360e01b8152818185818a5afa9182156102c45780926108ef575b50509183516395d89b4160e01b815260008183818a5afa9081156102c4576000916108ce575b5091845163313ce56760e01b815260208184818b5afa9081156102c4576000916108a0575b5090610670565b6108c1915060203d81116108c7575b6108b981836109da565b810190611039565b38610899565b503d6108af565b6108e9913d8091833e6108e181836109da565b810190610ff6565b38610874565b61090392503d8091833e6108e181836109da565b388061084e565b3461013d57602036600319011261013d576020610928600435610f1b565b6040516001600160a01b039091168152f35b600091031261013d57565b3461013d57600036600319011261013d576003546040516001600160a01b039091168152602090f35b3461013d57600036600319011261013d57602060ff60095416604051908152f35b634e487b7160e01b600052604160045260246000fd5b67ffffffffffffffff81116109b957604052565b61098f565b6080810190811067ffffffffffffffff8211176109b957604052565b90601f8019910116810190811067ffffffffffffffff8211176109b957604052565b60405190600060075490600182811c92818116918215610ae5575b6020918286108414610ad157858852879493602086019392918115610ab25750600114610a50575b505050610a4e925003836109da565b565b925093610a7f60076000527fa66cc928b5edb82af9bd49922954155ab7b0942694bea4ce44661d9a8736c68890565b946000935b828510610a9c57505050610a4e935001388080610a3f565b8654858501529586019588955093810193610a84565b92505050610a4e9491925060ff19168252151560051b01388080610a3f565b634e487b7160e01b85526022600452602485fd5b93607f1693610a17565b60405190600060085490600182811c92818116918215610ba2575b6020918286108414610ad157858852879493602086019392918115610ab25750600114610b4057505050610a4e925003836109da565b925093610b6f60086000527ff3f7a9fe364faab93b216da50a3214154f22a0a2b415b23a84c8169e8b636ee390565b946000935b828510610b8c57505050610a4e935001388080610a3f565b8654858501529586019588955093810193610b74565b93607f1693610b0a565b3461013d57600036600319011261013d57610561610bc8610aef565b604051918291602083526020830190610312565b3461013d57604036600319011261013d57602435610bf98161012c565b6000546001600160a01b039081163303610c35576004356000526006602052604060002091166001600160601b0360a01b825416179055600080f35b60405162461bcd60e51b815260206004820152600b60248201526a6f6e6c79206f776e65722160a81b6044820152606490fd5b9181601f8401121561013d5782359167ffffffffffffffff831161013d576020838186019501011161013d57565b60ff81160361013d57565b3461013d5760a036600319011261013d57600435602435610cc18161012c565b67ffffffffffffffff60443581811161013d57610ce2903690600401610c68565b9160643590811161013d57610cfb903690600401610c68565b92909160843594610d0b86610c96565b6002546001600160a01b03163303610d8e5760ff610d46610d2c838a611469565b6001600160a01b0316600090815260046020526040902090565b5416610d5757610d55966115ba565b005b60405162461bcd60e51b815260206004820152600f60248201526e616c7265616479206578697374732160881b6044820152606490fd5b60405162461bcd60e51b815260206004820152601060248201526f6f6e6c7920796172526571756573742160801b6044820152606490fd5b3461013d57600036600319011261013d576000546040516001600160a01b039091168152602090f35b3461013d57604036600319011261013d576020610928602435610e118161012c565b600435611469565b3461013d57600036600319011261013d576020600554604051908152f35b3461013d57602036600319011261013d576004356000526006602052602060018060a01b0360406000205416604051908152f35b3461013d57602036600319011261013d57600435610e888161012c565b60018060a01b03166000526004602052602060ff604060002054166040519015158152f35b3461013d57600036600319011261013d57610561610bc86109fc565b3461013d57600036600319011261013d576002546040516001600160a01b039091168152602090f35b3461013d57600036600319011261013d576001546040516001600160a01b039091168152602090f35b6000908152600660205260409020546001600160a01b03168061039857503090565b6040519060e0820182811067ffffffffffffffff8211176109b957604052565b6040519060e0820182811067ffffffffffffffff8211176109b957604052606060c0836000808252806020830152806040830152808483015280608083015260a08201520152565b67ffffffffffffffff81116109b957601f01601f191660200190565b90929192610fce81610fa5565b91610fdc60405193846109da565b82948284528282011161013d576020610a4e9301906102ef565b60208183031261013d5780519067ffffffffffffffff821161013d57019080601f8301121561013d57815161039892602001610fc1565b6040513d6000823e3d90fd5b9081602091031261013d575161039881610c96565b9081602091031261013d575190565b5190610a4e8261012c565b9081602091031261013d57516103988161012c565b936110ae60809460ff946110bc94999899885260018060a01b0316602088015260a0604088015260a0870190610312565b908582036060870152610312565b9416910152565b9080601f8301121561013d57815161039892602001610fc1565b9060208282031261013d57815167ffffffffffffffff9283821161013d57019060e08282031261013d5761110f610f3d565b92825184526111206020840161105d565b60208501526111316040840161105d565b60408501526060830151606085015261114c6080840161105d565b608085015260a083015160a085015260c083015190811161013d5761117192016110c3565b60c082015290565b1561118057565b60405162461bcd60e51b81526020600482015260116024820152706f6e6c7920796172526573706f6e73652160781b6044820152606490fd5b156111c057565b60405162461bcd60e51b81526020600482015260096024820152686e6f7420706565722160b81b6044820152606490fd5b156111f857565b60405162461bcd60e51b815260206004820152601c60248201527f6265666f7265206465706c6f79206272696467656420746f6b656e21000000006044820152606490fd5b3d15611268573d9061124e82610fa5565b9161125c60405193846109da565b82523d6000602084013e565b606090565b60405163a9059cbb60e01b60208201526001600160a01b03929092166024830152604480830193909352918152610a4e916112a96064836109da565b60018060a01b0316906112d3600080836020829551910182875af16112cc61123d565b9084611332565b908151918215159283611303575b5050506112eb5750565b60249060405190635274afe760e01b82526004820152fd5b81929350906020918101031261132e57602001519081159182150361132b57503880806112e1565b80fd5b5080fd5b90611359575080511561134757805190602001fd5b604051630a12f52160e11b8152600490fd5b8151158061138c575b61136a575090565b604051639996b31560e01b81526001600160a01b039091166004820152602490fd5b50803b15611362565b1561139c57565b60405162461bcd60e51b815260206004820152600e60248201526d06d73672e76616c756520213d20360941b6044820152606490fd5b156113d957565b60405162461bcd60e51b815260206004820152600f60248201526e7472616e73666572416d6f756e742160881b6044820152606490fd5b6040516323b872dd60e01b60208201526001600160a01b03928316602482015292909116604483015260648083019390935291815260a081019181831067ffffffffffffffff8411176109b957610a4e926040526112a9565b610398916101dc916040516114a1816104b06020958683019586909160349282526001600160601b03199060601b1660208201520190565b5190209061034d6040516114b7838301826109da565b818152828101916116ef83396114eb8360405180936114de838301968792519283916102ef565b81010380845201826109da565b5190206040519182019260ff60f81b84526001600160601b03193060601b1660218401526035830152605582015260558152611526816109be565b5190206001600160a01b031690565b908060209392818452848401376000828201840152601f01601f1916010190565b95906110bc9360ff956080979461158a939b9a9b8a5260018060a01b031660208a015260a060408a015260a0890191611535565b918683036060880152611535565b6001600160a01b03909116815260406020820181905261039892910190610312565b909495919392956040519260208401846115ee898684909160349282526001600160601b03199060601b1660208201520190565b0394611602601f19968781018352826109da565b51902060405161034d80820182811067ffffffffffffffff8211176109b95782916116ef833903906000f59182156102c4576003546001600160a01b03938416996116769761166a95909216986040519a8b9762cf530960e01b60208a015260248901611556565b039081018452836109da565b823b1561013d5760405163c0d91eaf60e01b815291600091839182916116a0919060048401611598565b038183865af180156102c4576116db575b506001600160a01b038116600090815260046020526040902061039890805460ff19166001179055565b806102be6116e8926109a5565b386116b156fe6080806040523461001657610331908161001c8239f35b600080fdfe60806040526004361061010f576000803560e01c63c0d91eaf14610023575061010f565b346100af5760403660031901126100af576004356001600160a01b03811681036100a75760243567ffffffffffffffff81116100ab57366023820112156100ab578060040135918361007c610077856100f3565b6100c8565b9284845236602486830101116100a757846100a495602460209301838701378401015261015b565b80f35b5080fd5b8280fd5b80fd5b634e487b7160e01b600052604160045260246000fd5b6040519190601f01601f1916820167ffffffffffffffff8111838210176100ee57604052565b6100b2565b67ffffffffffffffff81116100ee57601f01601f191660200190565b7f360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc54600090819081906001600160a01b0316368280378136915af43d82803e15610157573d90f35b3d90fd5b9060005460ff81166102295760ff1916600117600055813b15610208577f360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc80546001600160a01b0319166001600160a01b0384169081179091557fbc7cd75a20ee27fd9adebab32041f755214dbc6bffa90cc0225b39da2e5c2d3b600080a28051156101ed576101ea9161025d565b50565b5050346101f657565b60405163b398979f60e01b8152600490fd5b604051634c9c8ce360e01b81526001600160a01b0383166004820152602490fd5b60405162461bcd60e51b815260206004820152600c60248201526b616c7265616479496e69742160a01b6044820152606490fd5b60008061029193602081519101845af43d15610294573d91610281610077846100f3565b9283523d6000602085013e610298565b90565b6060915b906102bf57508051156102ad57805190602001fd5b604051630a12f52160e11b8152600490fd5b815115806102f2575b6102d0575090565b604051639996b31560e01b81526001600160a01b039091166004820152602490fd5b50803b156102c856fea264697066735822122039fb6cd7f494f168bc233ff122a1bccf5e454e013b46d5bde558049c71f1f78a64736f6c63430008140033a26469706673582212204390417a91716901e0e53252cdf4a2dfd28c5be6cafdef03d71b82659b7d496964736f6c63430008140033608080604052346100165761168e908161001c8239f35b600080fdfe6080604052600436101561001257600080fd5b60003560e01c8062cf5309146108ca57806306fdde0314610827578063095ea7b3146107a65780630e7c1cb51461077d57806318160ddd1461074057806323b872dd14610671578063313ce5671461064d57806340c10f191461056b57806352694c6b1461054f57806353638be51461053157806370a08231146104ea578063715018a6146104805780638da5cb5b1461044a57806395d89b411461037c578063989ee11a146103085780639dc29fac146101ff578063a9059cbb146101ce578063ab1a63cd146101af578063dd62ed3e14610166578063e8cfdce9146101325763f2fde38b1461010257600080fd5b3461012d57602036600319011261012d5761012b61011e6110ee565b610126611367565b6113a0565b005b600080fd5b3461012d57600036600319011261012d5761016261014e6112e0565b6040519182916020835260208301906111a0565b0390f35b3461012d57604036600319011261012d5761017f6110ee565b61019061018a6110d8565b91611414565b9060018060a01b03166000526020526020604060002054604051908152f35b3461012d5761012b6101c0366111c5565b916101c9611367565b61144d565b3461012d57604036600319011261012d576101f46101ea6110ee565b602435903361144d565b602060405160018152f35b3461012d57604036600319011261012d576102186110ee565b602435610223611367565b6001600160a01b0382169081156102ef57816000526000805160206115b983398151915280602052604060002054938285106102be5750817fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef9260009560209386885284520360408620557f52c63247e1f47db19d5ce0460030c497f067ca4cebf71ba98eeadabe20bace02818154039055604051908152a3005b60405163391434e360e21b81526001600160a01b039190911660048201526024810185905260448101839052606490fd5b604051634b637e8f60e11b815260006004820152602490fd5b3461012d57600036600319011261012d5760005460015490610328611234565b9160ff61036e6103366112e0565b610360604051968796875260018060a01b038616602088015260a0604088015260a08701906111a0565b9085820360608701526111a0565b9160a01c1660808301520390f35b3461012d57600036600319011261012d5760405160006000805160206115d983398151915280546103ac816111fa565b8085529160019180831690811561042057506001146103d6575b6101628561014e81870382611104565b600090815292506000805160206116198339815191525b82841061040857505050810160200161014e826101626103c6565b805460208587018101919091529093019281016103ed565b8695506101629693506020925061014e94915060ff191682840152151560051b82010192936103c6565b3461012d57600036600319011261012d576000805160206115f9833981519152546040516001600160a01b039091168152602090f35b3461012d57600036600319011261012d57610499611367565b6000805160206115f983398151915280546001600160a01b031981169091556000906001600160a01b03167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e08280a3005b3461012d57602036600319011261012d576001600160a01b0361050b6110ee565b166000526000805160206115b98339815191526020526020604060002054604051908152f35b3461012d57600036600319011261012d576020600054604051908152f35b3461012d57600036600319011261012d5761016261014e611234565b3461012d57604036600319011261012d576105846110ee565b60243590610590611367565b6001600160a01b0316908115610634577f52c63247e1f47db19d5ce0460030c497f067ca4cebf71ba98eeadabe20bace0280549082820180921161061e576000927fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef92602092558484526000805160206115b9833981519152825260408420818154019055604051908152a3005b634e487b7160e01b600052601160045260246000fd5b60405163ec442f0560e01b815260006004820152602490fd5b3461012d57600036600319011261012d57602060ff60015460a01c16604051908152f35b3461012d5761067f366111c5565b9061068983611414565b336000526020526040600020549260001984036106ab575b6101f4935061144d565b82841061071a576001600160a01b038116156107015733156106e857826101f4946106d583611414565b33600052602052036040600020556106a1565b604051634a1406b160e11b815260006004820152602490fd5b60405163e602df0560e01b815260006004820152602490fd5b604051637dc7a0d960e11b81523360048201526024810185905260448101849052606490fd5b3461012d57600036600319011261012d5760207f52c63247e1f47db19d5ce0460030c497f067ca4cebf71ba98eeadabe20bace0254604051908152f35b3461012d57600036600319011261012d576001546040516001600160a01b039091168152602090f35b3461012d57604036600319011261012d576107bf6110ee565b602435903315610701576001600160a01b03169081156106e8576107e233611414565b82600052602052806040600020556040519081527f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b92560203392a3602060405160018152f35b3461012d57600036600319011261012d5760405160006000805160206115998339815191528054610857816111fa565b808552916001918083169081156104205750600114610880576101628561014e81870382611104565b600090815292506000805160206115398339815191525b8284106108b257505050810160200161014e826101626103c6565b80546020858701810191909152909301928101610897565b3461012d5760a036600319011261012d576108e36110d8565b60443567ffffffffffffffff811161012d57610903903690600401611126565b9060643567ffffffffffffffff811161012d57610924903690600401611126565b9060ff608435166084350361012d57600080516020611639833981519152549067ffffffffffffffff8216801590816110c8575b60011490816110be575b1590816110b5575b506110a357600167ffffffffffffffff198316176000805160206116398339815191525560ff8260401c1615611076575b604051607960f81b908160208201526109d260218288516109c28184840160208d0161117d565b8101036001810184520182611104565b604051916020830152610a0360218387516109f38184840160208c0161117d565b8101036001810185520183611104565b610a0b611509565b610a13611509565b80519067ffffffffffffffff8211610d3a578190610a3f600080516020611599833981519152546111fa565b601f8111610ff5575b50602090601f8311600114610f6357600092610f58575b50508160011b916000199060031b1c191617600080516020611599833981519152555b80519067ffffffffffffffff8211610d3a578190610aae6000805160206115d9833981519152546111fa565b601f8111610ed7575b50602090601f8311600114610e4557600092610e3a575b50508160011b916000199060031b1c1916176000805160206115d9833981519152555b610af9611509565b610b01611509565b610b0a336113a0565b835167ffffffffffffffff8111610d3a57610b266002546111fa565b601f8111610dcd575b50602094601f8211600114610d5b57948192939495600092610d50575b50508160011b916000199060031b1c1916176002555b82519267ffffffffffffffff8411610d3a57610b7f6003546111fa565b601f8111610ccd575b50602090601f8511600114610c575760ff949160009183610c4c575b50508160011b916000199060031b1c1916176003555b600435600055600180546001600160a81b0319166001600160a01b0390921691909117608435841660a01b17905560401c1615610bf357005b68ff0000000000000000196000805160206116398339815191525416600080516020611639833981519152557fc7f505b2f371ae2175ee4913f4499e1f2633a7b5936321eed1cdaeb6115181d2602060405160018152a1005b015190508580610ba4565b90601f1985169160036000526000805160206115798339815191529260005b818110610cb5575091600193918760ff989410610c9c575b505050811b01600355610bba565b015160001960f88460031b161c19169055858080610c8e565b92936020600181928786015181550195019301610c76565b6003600052601f850160051c600080516020611579833981519152019060208610610d24575b601f0160051c60008051602061157983398151915201905b818110610d185750610b88565b60008155600101610d0b565b6000805160206115798339815191529150610cf3565b634e487b7160e01b600052604160045260246000fd5b015190508580610b4c565b601f1982169560026000526000805160206115598339815191529160005b888110610db557508360019596979810610d9c575b505050811b01600255610b62565b015160001960f88460031b161c19169055858080610d8e565b91926020600181928685015181550194019201610d79565b6002600052601f820160051c600080516020611559833981519152019060208310610e24575b601f0160051c60008051602061155983398151915201905b818110610e185750610b2f565b60008155600101610e0b565b6000805160206115598339815191529150610df3565b015190508680610ace565b92506000805160206115d9833981519152600052600080516020611619833981519152906000935b601f1984168510610ebc576001945083601f19811610610ea3575b505050811b016000805160206115d983398151915255610af1565b015160001960f88460031b161c19169055868080610e88565b81810151835560209485019460019093019290910190610e6d565b9091506000805160206115d9833981519152600052601f830160051c6000805160206116198339815191520160208410610f43575b908392915b601f820160051c600080516020611619833981519152018110610f345750610ab7565b60008155849350600101610f11565b50600080516020611619833981519152610f0c565b015190508780610a5f565b9250600080516020611599833981519152600052600080516020611539833981519152906000935b601f1984168510610fda576001945083601f19811610610fc1575b505050811b0160008051602061159983398151915255610a82565b015160001960f88460031b161c19169055878080610fa6565b81810151835560209485019460019093019290910190610f8b565b909150600080516020611599833981519152600052601f830160051c6000805160206115398339815191520160208410611061575b908392915b601f820160051c6000805160206115398339815191520181106110525750610a48565b6000815584935060010161102f565b5060008051602061153983398151915261102a565b68ffffffffffffffffff19821668010000000000000001176000805160206116398339815191525561099b565b60405163f92ee8a960e01b8152600490fd5b9050158561096a565b303b159150610962565b604084901c60ff16159150610958565b602435906001600160a01b038216820361012d57565b600435906001600160a01b038216820361012d57565b90601f8019910116810190811067ffffffffffffffff821117610d3a57604052565b81601f8201121561012d5780359067ffffffffffffffff8211610d3a576040519261115b601f8401601f191660200185611104565b8284526020838301011161012d57816000926020809301838601378301015290565b60005b8381106111905750506000910152565b8181015183820152602001611180565b906020916111b98151809281855285808601910161117d565b601f01601f1916010190565b606090600319011261012d576001600160a01b0390600435828116810361012d5791602435908116810361012d579060443590565b90600182811c9216801561122a575b602083101461121457565b634e487b7160e01b600052602260045260246000fd5b91607f1691611209565b6040519060008260025491611248836111fa565b808352926001908181169081156112be5750600114611271575b5061126f92500383611104565b565b6002600090815291506000805160206115598339815191525b8483106112a3575061126f935050810160200138611262565b81935090816020925483858a0101520191019091859261128a565b90506020925061126f94915060ff191682840152151560051b82010138611262565b60405190600082600354916112f4836111fa565b808352926001908181169081156112be575060011461131a575061126f92500383611104565b6003600090815291506000805160206115798339815191525b84831061134c575061126f935050810160200138611262565b81935090816020925483858a01015201910190918592611333565b6000805160206115f9833981519152546001600160a01b0316330361138857565b60405163118cdaa760e01b8152336004820152602490fd5b6001600160a01b039081169081156113fb576000805160206115f983398151915280546001600160a01b031981168417909155167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0600080a3565b604051631e4fbdf760e01b815260006004820152602490fd5b6001600160a01b031660009081527f52c63247e1f47db19d5ce0460030c497f067ca4cebf71ba98eeadabe20bace016020526040902090565b916001600160a01b038084169283156102ef5716928315610634576000908382526000805160206115b9833981519152806020526040832054918483106114d6575082847fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef959360409388602097528652038282205586815220818154019055604051908152a3565b60405163391434e360e21b81526001600160a01b0391909116600482015260248101929092525060448101839052606490fd5b60ff6000805160206116398339815191525460401c161561152657565b604051631afcd79f60e31b8152600490fdfe2ae08a8e29253f69ac5d979a101956ab8f8d9d7ded63fa7a83b16fc47648eab0405787fa12a823e0f2b7631cc41b3ba8828b3321ca811111fa75cd3aa3bb5acec2575a0e9e593c00f959f8c92f12db2869c3395a3b0502d05e2516446f71f85b52c63247e1f47db19d5ce0460030c497f067ca4cebf71ba98eeadabe20bace0352c63247e1f47db19d5ce0460030c497f067ca4cebf71ba98eeadabe20bace0052c63247e1f47db19d5ce0460030c497f067ca4cebf71ba98eeadabe20bace049016d09d72d40fdae2fd8ceac6b6234c7706214fd39c1cd1e609a0528c19930046a2803e59a4de4e7a4c574b1243f25977ac4c77d5a1a4a609b5394cebb4a2aaf0c57e16840df040f15088dc2f81fe391c3923bec73e23a9662efc9c229c6a00a264697066735822122079ac43397602a85c5983e71d54a4c47cbb1f5f20deedfba6e03c73c7e4c8d08f64736f6c63430008140033",
  "deployedBytecode": "0x6080604052600436101561001257600080fd5b60003560e01c806302e6d464146101275780630a4c6b7e1461012257806364996c9b1461011d57806367ebb6b2146101185780637078944c14610113578063768ea56a1461010e5780637fedad55146101095780638069c497146101045780638ca9ca8e146100ff5780638da5cb5b146100fa57806399f3f9f7146100f55780639a8a0592146100f0578063be4f3e8f146100eb578063c287e578146100e6578063dfe70cef146100e1578063e6a1496d146100dc5763f4100f00146100d757600080fd5b610ef2565b610ec9565b610ead565b610e6b565b610e37565b610e19565b610def565b610dc6565b610ca1565b610bdc565b610bac565b61096e565b610945565b61090a565b610610565b61039b565b610142565b6001600160a01b0381160361013d57565b600080fd5b3461013d57608036600319011261013d576004356024356101628161012c565b6044356064356101718161012c565b6002546001600160a01b039081169361018b338614611179565b60405195869563f0db1fbf60e01b87528660046000998a935afa9586156102c45787966101f09188916102cd575b50846101e86101dc60206101cd8551610f1b565b9401516001600160a01b031690565b6001600160a01b031690565b9116146111b9565b600554810361022f57501680610222575082809281925af161021061123d565b901561021a575080f35b602081519101fd5b61022c935061126d565b80f35b9061023d9195949395611469565b6001600160a01b038116600090815260046020526040902061026a90610265905b5460ff1690565b6111f1565b16803b156102c9576040516340c10f1960e01b81526001600160a01b0394909416600485015260248401919091528290604490829084905af180156102c4576102b1575080f35b806102be61022c926109a5565b8061093a565b61102d565b8280fd5b6102e991503d808a833e6102e181836109da565b8101906110dd565b386101b9565b60005b8381106103025750506000910152565b81810151838201526020016102f2565b9060209161032b815180928185528580860191016102ef565b601f01601f1916010190565b61010060c061039893602084528051602085015260018060a01b038060208301511660408601528060408301511660608601526060820151608086015260808201511660a085015260a08101518285015201519160e0808201520190610312565b90565b608036600319011261013d576004356103b38161012c565b60243560443591606435906103c78261012c565b6103cf610f5d565b506001600160a01b038116806105f5576103ea8434146113d2565b6001600160a01b038216600090815260046020526040902061040b9061025e565b9182156105ec576040516353638be560e01b8152602081600481865afa9081156102c4576000916105be575b50925b156105ae5750602060049160405192838092630e7c1cb560e01b82525afa9283156102c4576104be936104b092600091610580575b50945b60405162b9b51960e21b602082015260248101949094526001600160a01b0395861660448501526064840152909316608482015291829060a4820190565b03601f1981018352826109da565b6104fb600554926104ce81610f1b565b906104d7610f3d565b94855230602086015233604086015260608501526001600160a01b03166080840152565b600060a083015260c082015260015461051e906101dc906001600160a01b031681565b9060006040518093637d60955760e11b82528183816105408760048301610337565b03925af19182156102c45761056192610565575b5060405191829182610337565b0390f35b610579903d806000833e6102e181836109da565b5038610554565b6105a1915060203d81116105a7575b61059981836109da565b810190611068565b3861046f565b503d61058f565b6104b09150926104be9394610472565b6105df915060203d81116105e5575b6105d781836109da565b81019061104e565b38610437565b503d6105cd565b6005549261043a565b6105ff3415611395565b61060b84303384611410565b6103ea565b3461013d5760408060031936011261013d5760048035916106308361012c565b6024359161063c610f5d565b506001600160a01b0384169360008561082d57506106586109fc565b91610661610aef565b9161066e60095460ff1690565b905b6001600160a01b03811660009081526004602052604090206106919061025e565b15610811575084516353638be560e01b8152602094858285818c5afa9182156102c457849287916000916107f4575b5099885193848092630e7c1cb560e01b82525afa9182156102c45761079d9961072161075f9461072f9360009a8b926107d7575b5050955b600554986107058d610f1b565b958c51988995634654e54760e11b60208801526024870161107d565b03601f1981018552846109da565b610737610f3d565b9485523060208601529396879490338689015260608601526001600160a01b03166080850152565b60a0830184905260c0830152600154610782906101dc906001600160a01b031681565b90838551809881958294637d60955760e11b84528301610337565b03925af19283156102c457610561936107bc575b505191829182610337565b6107d0903d806000833e6102e181836109da565b50386107b1565b6107ed9250803d106105a75761059981836109da565b38806106f4565b61080b9150823d84116105e5576105d781836109da565b386106c0565b61079d975060009461072f61075f9261072160055491956106f8565b83516306fdde0360e01b8152818185818a5afa9182156102c45780926108ef575b50509183516395d89b4160e01b815260008183818a5afa9081156102c4576000916108ce575b5091845163313ce56760e01b815260208184818b5afa9081156102c4576000916108a0575b5090610670565b6108c1915060203d81116108c7575b6108b981836109da565b810190611039565b38610899565b503d6108af565b6108e9913d8091833e6108e181836109da565b810190610ff6565b38610874565b61090392503d8091833e6108e181836109da565b388061084e565b3461013d57602036600319011261013d576020610928600435610f1b565b6040516001600160a01b039091168152f35b600091031261013d57565b3461013d57600036600319011261013d576003546040516001600160a01b039091168152602090f35b3461013d57600036600319011261013d57602060ff60095416604051908152f35b634e487b7160e01b600052604160045260246000fd5b67ffffffffffffffff81116109b957604052565b61098f565b6080810190811067ffffffffffffffff8211176109b957604052565b90601f8019910116810190811067ffffffffffffffff8211176109b957604052565b60405190600060075490600182811c92818116918215610ae5575b6020918286108414610ad157858852879493602086019392918115610ab25750600114610a50575b505050610a4e925003836109da565b565b925093610a7f60076000527fa66cc928b5edb82af9bd49922954155ab7b0942694bea4ce44661d9a8736c68890565b946000935b828510610a9c57505050610a4e935001388080610a3f565b8654858501529586019588955093810193610a84565b92505050610a4e9491925060ff19168252151560051b01388080610a3f565b634e487b7160e01b85526022600452602485fd5b93607f1693610a17565b60405190600060085490600182811c92818116918215610ba2575b6020918286108414610ad157858852879493602086019392918115610ab25750600114610b4057505050610a4e925003836109da565b925093610b6f60086000527ff3f7a9fe364faab93b216da50a3214154f22a0a2b415b23a84c8169e8b636ee390565b946000935b828510610b8c57505050610a4e935001388080610a3f565b8654858501529586019588955093810193610b74565b93607f1693610b0a565b3461013d57600036600319011261013d57610561610bc8610aef565b604051918291602083526020830190610312565b3461013d57604036600319011261013d57602435610bf98161012c565b6000546001600160a01b039081163303610c35576004356000526006602052604060002091166001600160601b0360a01b825416179055600080f35b60405162461bcd60e51b815260206004820152600b60248201526a6f6e6c79206f776e65722160a81b6044820152606490fd5b9181601f8401121561013d5782359167ffffffffffffffff831161013d576020838186019501011161013d57565b60ff81160361013d57565b3461013d5760a036600319011261013d57600435602435610cc18161012c565b67ffffffffffffffff60443581811161013d57610ce2903690600401610c68565b9160643590811161013d57610cfb903690600401610c68565b92909160843594610d0b86610c96565b6002546001600160a01b03163303610d8e5760ff610d46610d2c838a611469565b6001600160a01b0316600090815260046020526040902090565b5416610d5757610d55966115ba565b005b60405162461bcd60e51b815260206004820152600f60248201526e616c7265616479206578697374732160881b6044820152606490fd5b60405162461bcd60e51b815260206004820152601060248201526f6f6e6c7920796172526571756573742160801b6044820152606490fd5b3461013d57600036600319011261013d576000546040516001600160a01b039091168152602090f35b3461013d57604036600319011261013d576020610928602435610e118161012c565b600435611469565b3461013d57600036600319011261013d576020600554604051908152f35b3461013d57602036600319011261013d576004356000526006602052602060018060a01b0360406000205416604051908152f35b3461013d57602036600319011261013d57600435610e888161012c565b60018060a01b03166000526004602052602060ff604060002054166040519015158152f35b3461013d57600036600319011261013d57610561610bc86109fc565b3461013d57600036600319011261013d576002546040516001600160a01b039091168152602090f35b3461013d57600036600319011261013d576001546040516001600160a01b039091168152602090f35b6000908152600660205260409020546001600160a01b03168061039857503090565b6040519060e0820182811067ffffffffffffffff8211176109b957604052565b6040519060e0820182811067ffffffffffffffff8211176109b957604052606060c0836000808252806020830152806040830152808483015280608083015260a08201520152565b67ffffffffffffffff81116109b957601f01601f191660200190565b90929192610fce81610fa5565b91610fdc60405193846109da565b82948284528282011161013d576020610a4e9301906102ef565b60208183031261013d5780519067ffffffffffffffff821161013d57019080601f8301121561013d57815161039892602001610fc1565b6040513d6000823e3d90fd5b9081602091031261013d575161039881610c96565b9081602091031261013d575190565b5190610a4e8261012c565b9081602091031261013d57516103988161012c565b936110ae60809460ff946110bc94999899885260018060a01b0316602088015260a0604088015260a0870190610312565b908582036060870152610312565b9416910152565b9080601f8301121561013d57815161039892602001610fc1565b9060208282031261013d57815167ffffffffffffffff9283821161013d57019060e08282031261013d5761110f610f3d565b92825184526111206020840161105d565b60208501526111316040840161105d565b60408501526060830151606085015261114c6080840161105d565b608085015260a083015160a085015260c083015190811161013d5761117192016110c3565b60c082015290565b1561118057565b60405162461bcd60e51b81526020600482015260116024820152706f6e6c7920796172526573706f6e73652160781b6044820152606490fd5b156111c057565b60405162461bcd60e51b81526020600482015260096024820152686e6f7420706565722160b81b6044820152606490fd5b156111f857565b60405162461bcd60e51b815260206004820152601c60248201527f6265666f7265206465706c6f79206272696467656420746f6b656e21000000006044820152606490fd5b3d15611268573d9061124e82610fa5565b9161125c60405193846109da565b82523d6000602084013e565b606090565b60405163a9059cbb60e01b60208201526001600160a01b03929092166024830152604480830193909352918152610a4e916112a96064836109da565b60018060a01b0316906112d3600080836020829551910182875af16112cc61123d565b9084611332565b908151918215159283611303575b5050506112eb5750565b60249060405190635274afe760e01b82526004820152fd5b81929350906020918101031261132e57602001519081159182150361132b57503880806112e1565b80fd5b5080fd5b90611359575080511561134757805190602001fd5b604051630a12f52160e11b8152600490fd5b8151158061138c575b61136a575090565b604051639996b31560e01b81526001600160a01b039091166004820152602490fd5b50803b15611362565b1561139c57565b60405162461bcd60e51b815260206004820152600e60248201526d06d73672e76616c756520213d20360941b6044820152606490fd5b156113d957565b60405162461bcd60e51b815260206004820152600f60248201526e7472616e73666572416d6f756e742160881b6044820152606490fd5b6040516323b872dd60e01b60208201526001600160a01b03928316602482015292909116604483015260648083019390935291815260a081019181831067ffffffffffffffff8411176109b957610a4e926040526112a9565b610398916101dc916040516114a1816104b06020958683019586909160349282526001600160601b03199060601b1660208201520190565b5190209061034d6040516114b7838301826109da565b818152828101916116ef83396114eb8360405180936114de838301968792519283916102ef565b81010380845201826109da565b5190206040519182019260ff60f81b84526001600160601b03193060601b1660218401526035830152605582015260558152611526816109be565b5190206001600160a01b031690565b908060209392818452848401376000828201840152601f01601f1916010190565b95906110bc9360ff956080979461158a939b9a9b8a5260018060a01b031660208a015260a060408a015260a0890191611535565b918683036060880152611535565b6001600160a01b03909116815260406020820181905261039892910190610312565b909495919392956040519260208401846115ee898684909160349282526001600160601b03199060601b1660208201520190565b0394611602601f19968781018352826109da565b51902060405161034d80820182811067ffffffffffffffff8211176109b95782916116ef833903906000f59182156102c4576003546001600160a01b03938416996116769761166a95909216986040519a8b9762cf530960e01b60208a015260248901611556565b039081018452836109da565b823b1561013d5760405163c0d91eaf60e01b815291600091839182916116a0919060048401611598565b038183865af180156102c4576116db575b506001600160a01b038116600090815260046020526040902061039890805460ff19166001179055565b806102be6116e8926109a5565b386116b156fe6080806040523461001657610331908161001c8239f35b600080fdfe60806040526004361061010f576000803560e01c63c0d91eaf14610023575061010f565b346100af5760403660031901126100af576004356001600160a01b03811681036100a75760243567ffffffffffffffff81116100ab57366023820112156100ab578060040135918361007c610077856100f3565b6100c8565b9284845236602486830101116100a757846100a495602460209301838701378401015261015b565b80f35b5080fd5b8280fd5b80fd5b634e487b7160e01b600052604160045260246000fd5b6040519190601f01601f1916820167ffffffffffffffff8111838210176100ee57604052565b6100b2565b67ffffffffffffffff81116100ee57601f01601f191660200190565b7f360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc54600090819081906001600160a01b0316368280378136915af43d82803e15610157573d90f35b3d90fd5b9060005460ff81166102295760ff1916600117600055813b15610208577f360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc80546001600160a01b0319166001600160a01b0384169081179091557fbc7cd75a20ee27fd9adebab32041f755214dbc6bffa90cc0225b39da2e5c2d3b600080a28051156101ed576101ea9161025d565b50565b5050346101f657565b60405163b398979f60e01b8152600490fd5b604051634c9c8ce360e01b81526001600160a01b0383166004820152602490fd5b60405162461bcd60e51b815260206004820152600c60248201526b616c7265616479496e69742160a01b6044820152606490fd5b60008061029193602081519101845af43d15610294573d91610281610077846100f3565b9283523d6000602085013e610298565b90565b6060915b906102bf57508051156102ad57805190602001fd5b604051630a12f52160e11b8152600490fd5b815115806102f2575b6102d0575090565b604051639996b31560e01b81526001600160a01b039091166004820152602490fd5b50803b156102c856fea264697066735822122039fb6cd7f494f168bc233ff122a1bccf5e454e013b46d5bde558049c71f1f78a64736f6c63430008140033a26469706673582212204390417a91716901e0e53252cdf4a2dfd28c5be6cafdef03d71b82659b7d496964736f6c63430008140033",
  "devdoc": {
    "errors": {
      "AddressEmptyCode(address)": [
        {
          "details": "There's no code at `target` (it is not a contract)."
        }
      ],
      "AddressInsufficientBalance(address)": [
        {
          "details": "The ETH balance of the account is not enough to perform the operation."
        }
      ],
      "FailedInnerCall()": [
        {
          "details": "A call to an address target failed. The target may have reverted."
        }
      ],
      "SafeERC20FailedOperation(address)": [
        {
          "details": "An operation with an ERC20 token failed."
        }
      ]
    },
    "kind": "dev",
    "methods": {},
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 6695,
        "contract": "contracts/apps/bridge20/YarBridge20.sol:YarBridge20",
        "label": "owner",
        "offset": 0,
        "slot": "0",
        "type": "t_address"
      },
      {
        "astId": 6697,
        "contract": "contracts/apps/bridge20/YarBridge20.sol:YarBridge20",
        "label": "yarRequest",
        "offset": 0,
        "slot": "1",
        "type": "t_address"
      },
      {
        "astId": 6699,
        "contract": "contracts/apps/bridge20/YarBridge20.sol:YarBridge20",
        "label": "yarResponse",
        "offset": 0,
        "slot": "2",
        "type": "t_address"
      },
      {
        "astId": 6701,
        "contract": "contracts/apps/bridge20/YarBridge20.sol:YarBridge20",
        "label": "bridgedTokenImplementation",
        "offset": 0,
        "slot": "3",
        "type": "t_address"
      },
      {
        "astId": 6705,
        "contract": "contracts/apps/bridge20/YarBridge20.sol:YarBridge20",
        "label": "isBridgedToken",
        "offset": 0,
        "slot": "4",
        "type": "t_mapping(t_address,t_bool)"
      },
      {
        "astId": 6707,
        "contract": "contracts/apps/bridge20/YarBridge20.sol:YarBridge20",
        "label": "chainId",
        "offset": 0,
        "slot": "5",
        "type": "t_uint256"
      },
      {
        "astId": 6711,
        "contract": "contracts/apps/bridge20/YarBridge20.sol:YarBridge20",
        "label": "peers",
        "offset": 0,
        "slot": "6",
        "type": "t_mapping(t_uint256,t_address)"
      },
      {
        "astId": 6713,
        "contract": "contracts/apps/bridge20/YarBridge20.sol:YarBridge20",
        "label": "nativeName",
        "offset": 0,
        "slot": "7",
        "type": "t_string_storage"
      },
      {
        "astId": 6715,
        "contract": "contracts/apps/bridge20/YarBridge20.sol:YarBridge20",
        "label": "nativeSymbol",
        "offset": 0,
        "slot": "8",
        "type": "t_string_storage"
      },
      {
        "astId": 6717,
        "contract": "contracts/apps/bridge20/YarBridge20.sol:YarBridge20",
        "label": "nativeDecimals",
        "offset": 0,
        "slot": "9",
        "type": "t_uint8"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_mapping(t_address,t_bool)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => bool)",
        "numberOfBytes": "32",
        "value": "t_bool"
      },
      "t_mapping(t_uint256,t_address)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => address)",
        "numberOfBytes": "32",
        "value": "t_address"
      },
      "t_string_storage": {
        "encoding": "bytes",
        "label": "string",
        "numberOfBytes": "32"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      },
      "t_uint8": {
        "encoding": "inplace",
        "label": "uint8",
        "numberOfBytes": "1"
      }
    }
  }
}