{
  "language": "Solidity",
  "sources": {
    "@openzeppelin/contracts/token/ERC20/IERC20.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.0.0) (token/ERC20/IERC20.sol)\n\npragma solidity ^0.8.20;\n\n/**\n * @dev Interface of the ERC20 standard as defined in the EIP.\n */\ninterface IERC20 {\n    /**\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\n     * another (`to`).\n     *\n     * Note that `value` may be zero.\n     */\n    event Transfer(address indexed from, address indexed to, uint256 value);\n\n    /**\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\n     * a call to {approve}. `value` is the new allowance.\n     */\n    event Approval(address indexed owner, address indexed spender, uint256 value);\n\n    /**\n     * @dev Returns the value of tokens in existence.\n     */\n    function totalSupply() external view returns (uint256);\n\n    /**\n     * @dev Returns the value of tokens owned by `account`.\n     */\n    function balanceOf(address account) external view returns (uint256);\n\n    /**\n     * @dev Moves a `value` amount of tokens from the caller's account to `to`.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transfer(address to, uint256 value) external returns (bool);\n\n    /**\n     * @dev Returns the remaining number of tokens that `spender` will be\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\n     * zero by default.\n     *\n     * This value changes when {approve} or {transferFrom} are called.\n     */\n    function allowance(address owner, address spender) external view returns (uint256);\n\n    /**\n     * @dev Sets a `value` amount of tokens as the allowance of `spender` over the\n     * caller's tokens.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\n     * that someone may use both the old and the new allowance by unfortunate\n     * transaction ordering. One possible solution to mitigate this race\n     * condition is to first reduce the spender's allowance to 0 and set the\n     * desired value afterwards:\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n     *\n     * Emits an {Approval} event.\n     */\n    function approve(address spender, uint256 value) external returns (bool);\n\n    /**\n     * @dev Moves a `value` amount of tokens from `from` to `to` using the\n     * allowance mechanism. `value` is then deducted from the caller's\n     * allowance.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transferFrom(address from, address to, uint256 value) external returns (bool);\n}\n"
    },
    "contracts/YarHub.sol": {
      "content": "// SPDX-License-Identifier: UNLICENSED\npragma solidity 0.8.20;\n\nimport { IERC20 } from \"@openzeppelin/contracts/token/ERC20/IERC20.sol\";\nimport { YarLib } from \"./YarLib.sol\";\nimport { YarResponse } from \"./YarResponse.sol\";\n\ncontract YarHub {\n    address public relayer;\n\n    enum TxStatus {\n        NotExists,\n        WaitForPay,\n        InProgress,\n        Completed,\n        Rejected\n    }\n\n    struct WrappedYarTX {\n        YarLib.YarTX yarTx;\n        TxStatus status;\n        uint256 lockedFees;\n        uint256 usedFees;\n        bytes32 initialTxHash;\n        bytes32 targetTxHash;\n    }\n\n    mapping(bytes32 yarTxHash => WrappedYarTX hubTx) public wrappedYarTXs;\n\n    event CreateTransaction(YarLib.YarTX yarTx);\n\n    event ExecuteTransaction(YarLib.YarTX yarTx);\n\n    event CommitTransaction(\n        YarLib.YarTX yarTx,\n        TxStatus status,\n        uint256 usedFees,\n        uint256 feesToReturn\n    );\n\n    event Deposit(address account, uint256 amount);\n\n    event Approve(address account, uint256 intiailChainId, address spender, uint256 amount);\n\n    mapping(address account => mapping(uint256 chainId => mapping(address spender => uint256 amount)))\n        public allowance;\n\n\n    constructor(address initialRelayer) {\n        relayer = initialRelayer;\n    }\n\n    mapping(address account => uint256 feeTokenAmount) public deposits;\n\n    function deposit(address account, uint256 feeTokenAmount) external {\n        require(msg.sender == relayer, \"only relayer!\");\n        deposits[account] += feeTokenAmount;\n        emit Deposit(account, feeTokenAmount);\n    }\n\n    function approve(\n        address account,\n        uint256 intiailChainId,\n        address spender,\n        uint256 amount\n    ) external {\n        require(msg.sender == relayer, \"only relayer!\");\n        allowance[account][intiailChainId][spender] = amount;\n        emit Approve(account, intiailChainId, spender, amount);\n    }\n\n    function createTransaction(YarLib.YarTX calldata yarTX, bytes32 initialTxHash) external {\n        require(msg.sender == relayer, \"only relayer!\");\n        bytes32 yarTxHash = keccak256(abi.encode(yarTX));\n        wrappedYarTXs[yarTxHash] = WrappedYarTX(\n            yarTX,\n            TxStatus.WaitForPay,\n            0,\n            0,\n            initialTxHash,\n            bytes32(0)\n        );\n        emit CreateTransaction(yarTX);\n    }\n\n    function executeTransaction(YarLib.YarTX calldata yarTX, uint256 feeTokensToLock) external {\n        require(msg.sender == relayer, \"only relayer!\");\n        bytes32 yarTxHash = keccak256(abi.encode(yarTX));\n        require(wrappedYarTXs[yarTxHash].status == TxStatus.WaitForPay, \"only WaitForPay!\");\n        require(deposits[yarTX.payer] >= feeTokensToLock, \"feeTokensToLock!\");\n        require(\n            allowance[yarTX.payer][yarTX.initialChainId][yarTX.sender] >= feeTokensToLock,\n            \"deposit allowance!\"\n        );\n        deposits[yarTX.payer] -= feeTokensToLock;\n        allowance[yarTX.payer][yarTX.initialChainId][yarTX.sender] -= feeTokensToLock;\n        wrappedYarTXs[yarTxHash].lockedFees = feeTokensToLock;\n        wrappedYarTXs[yarTxHash].status = TxStatus.InProgress;\n\n        emit ExecuteTransaction(yarTX);\n    }\n\n    function completeTransaction(\n        YarLib.YarTX calldata yarTX,\n        bytes32 targetTxHash,\n        uint256 usedFees\n    ) external {\n        _commitTransaction(yarTX, targetTxHash, TxStatus.Completed, usedFees);\n    }\n\n    function rejectTransaction(\n        YarLib.YarTX calldata yarTX,\n        bytes32 targetTxHash,\n        uint256 usedFees\n    ) external {\n        _commitTransaction(yarTX, targetTxHash, TxStatus.Rejected, usedFees);\n    }\n\n    function _commitTransaction(\n        YarLib.YarTX calldata yarTX,\n        bytes32 targetTxHash,\n        TxStatus status,\n        uint256 usedFees\n    ) internal {\n        require(msg.sender == relayer, \"only relayer!\");\n        bytes32 yarTxHash = keccak256(abi.encode(yarTX));\n        require(\n            wrappedYarTXs[yarTxHash].status == TxStatus.InProgress,\n            \"only on progress can updated!\"\n        );\n\n        wrappedYarTXs[yarTxHash].status = status;\n        wrappedYarTXs[yarTxHash].usedFees = usedFees;\n        wrappedYarTXs[yarTxHash].targetTxHash = targetTxHash;\n\n        uint256 lockedFees = wrappedYarTXs[yarTxHash].lockedFees;\n        uint256 feesToReturn = lockedFees > usedFees ? lockedFees - usedFees : 0;\n        deposits[yarTX.payer] += feesToReturn;\n\n        emit CommitTransaction(yarTX, status, usedFees, feesToReturn);\n    }\n}\n"
    },
    "contracts/YarLib.sol": {
      "content": "// SPDX-License-Identifier: UNLICENSED\npragma solidity 0.8.20;\n\nlibrary YarLib {\n    struct YarTX {\n        uint256 initialChainId;\n        address sender;\n        address payer;\n        uint256 targetChainId;\n        address target;\n        uint256 value;\n        bytes data;\n    }\n}\n"
    },
    "contracts/YarResponse.sol": {
      "content": "// SPDX-License-Identifier: UNLICENSED\npragma solidity 0.8.20;\n\nimport { YarLib } from \"./YarLib.sol\";\n\ncontract YarResponse {\n    address public relayer;\n\n    YarLib.YarTX internal _trustedYarTx;\n\n    function trustedYarTx() external view returns (YarLib.YarTX memory) {\n        return _trustedYarTx;\n    }\n\n    constructor(address intialRelayer) {\n        relayer = intialRelayer;\n    }\n\n    function deliver(YarLib.YarTX calldata yarTx) external payable {\n        require(msg.sender == relayer, \"only relayer!\");\n        require(yarTx.value == msg.value, \"msg.value!\");\n\n        _trustedYarTx = yarTx;\n\n        (bool success, bytes memory result) = yarTx.target.call{ value: yarTx.value }(yarTx.data);\n        if (success == false) {\n            assembly {\n                revert(add(result, 32), mload(result))\n            }\n        }\n\n        delete _trustedYarTx;\n    }\n}\n"
    }
  },
  "settings": {
    "optimizer": {
      "enabled": true,
      "runs": 200
    },
    "viaIR": true,
    "evmVersion": "paris",
    "outputSelection": {
      "*": {
        "*": [
          "abi",
          "evm.bytecode",
          "evm.deployedBytecode",
          "evm.methodIdentifiers",
          "metadata",
          "devdoc",
          "userdoc",
          "storageLayout",
          "evm.gasEstimates"
        ],
        "": [
          "ast"
        ]
      }
    },
    "metadata": {
      "useLiteralContent": true
    }
  }
}