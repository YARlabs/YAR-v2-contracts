{
  "address": "0x37B03A666eC1e46DE9115BDb3A5334A313e35B02",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "intialYarConnector",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "target",
          "type": "address"
        }
      ],
      "name": "AddressEmptyCode",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "AddressInsufficientBalance",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "FailedInnerCall",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "owner",
          "type": "address"
        }
      ],
      "name": "OwnableInvalidOwner",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "OwnableUnauthorizedAccount",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "token",
          "type": "address"
        }
      ],
      "name": "SafeERC20FailedOperation",
      "type": "error"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "OwnershipTransferred",
      "type": "event"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "messages",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "messagesCount",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "message",
          "type": "string"
        }
      ],
      "name": "receiveMessage",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "renounceOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "targetChainId",
          "type": "uint256"
        },
        {
          "internalType": "string",
          "name": "message",
          "type": "string"
        },
        {
          "internalType": "uint256",
          "name": "feeAmount",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "feeSignatureExpired",
          "type": "uint256"
        },
        {
          "internalType": "bytes",
          "name": "feeSignature",
          "type": "bytes"
        }
      ],
      "name": "sendMessage",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "transferOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "yarConnector",
      "outputs": [
        {
          "internalType": "contract IYarConnector",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    }
  ],
  "transactionHash": "0x6623c546fd8f605fc7885f2035a9c1fb36fe1e92d28706a3332635a9682555b0",
  "receipt": {
    "to": null,
    "from": "0xF9d562564149A1fA571D23EdcA644951E4154540",
    "contractAddress": "0x37B03A666eC1e46DE9115BDb3A5334A313e35B02",
    "transactionIndex": 1,
    "gasUsed": "739918",
    "logsBloom": "0x
    "blockHash": "0x6395e205f22dc3b4439b710b9518b73055e46060b602158e7821bdf8c758da9a",
    "transactionHash": "0x6623c546fd8f605fc7885f2035a9c1fb36fe1e92d28706a3332635a9682555b0",
    "logs": [
      {
        "transactionIndex": 1,
        "blockNumber": 31685523,
        "transactionHash": "0x6623c546fd8f605fc7885f2035a9c1fb36fe1e92d28706a3332635a9682555b0",
        "address": "0x37B03A666eC1e46DE9115BDb3A5334A313e35B02",
        "topics": [
          "0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x000000000000000000000000f9d562564149a1fa571d23edca644951e4154540"
        ],
        "data": "0x",
        "logIndex": 2,
        "blockHash": "0x6395e205f22dc3b4439b710b9518b73055e46060b602158e7821bdf8c758da9a"
      }
    ],
    "blockNumber": 31685523,
    "cumulativeGasUsed": "782655",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0x6EA43d6Bf2e82F73ac3cB988389a02014D74a92a"
  ],
  "numDeployments": 1,
  "solcInputHash": "09d82f7750202df666cf8d0c80e81484",
  "metadata": "{\"compiler\":{\"version\":\"0.8.20+commit.a1b79de6\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"intialYarConnector\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"target\",\"type\":\"address\"}],\"name\":\"AddressEmptyCode\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"AddressInsufficientBalance\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"FailedInnerCall\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"OwnableInvalidOwner\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"OwnableUnauthorizedAccount\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"}],\"name\":\"SafeERC20FailedOperation\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"messages\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"messagesCount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"message\",\"type\":\"string\"}],\"name\":\"receiveMessage\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"targetChainId\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"message\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"feeAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"feeSignatureExpired\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"feeSignature\",\"type\":\"bytes\"}],\"name\":\"sendMessage\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"yarConnector\",\"outputs\":[{\"internalType\":\"contract IYarConnector\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"errors\":{\"AddressEmptyCode(address)\":[{\"details\":\"There's no code at `target` (it is not a contract).\"}],\"AddressInsufficientBalance(address)\":[{\"details\":\"The ETH balance of the account is not enough to perform the operation.\"}],\"FailedInnerCall()\":[{\"details\":\"A call to an address target failed. The target may have reverted.\"}],\"OwnableInvalidOwner(address)\":[{\"details\":\"The owner is not a valid owner account. (eg. `address(0)`)\"}],\"OwnableUnauthorizedAccount(address)\":[{\"details\":\"The caller account is not authorized to perform an operation.\"}],\"SafeERC20FailedOperation(address)\":[{\"details\":\"An operation with an ERC20 token failed.\"}]},\"kind\":\"dev\",\"methods\":{\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"renounceOwnership()\":{\"details\":\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby disabling any functionality that is only available to the owner.\"},\"transferOwnership(address)\":{\"details\":\"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/apps/echo/YarEcho.sol\":\"YarEcho\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[],\"viaIR\":true},\"sources\":{\"@openzeppelin/contracts/access/Ownable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (access/Ownable.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {Context} from \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * The initial owner is set to the address provided by the deployer. This can\\n * later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    /**\\n     * @dev The caller account is not authorized to perform an operation.\\n     */\\n    error OwnableUnauthorizedAccount(address account);\\n\\n    /**\\n     * @dev The owner is not a valid owner account. (eg. `address(0)`)\\n     */\\n    error OwnableInvalidOwner(address owner);\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the address provided by the deployer as the initial owner.\\n     */\\n    constructor(address initialOwner) {\\n        if (initialOwner == address(0)) {\\n            revert OwnableInvalidOwner(address(0));\\n        }\\n        _transferOwnership(initialOwner);\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        _checkOwner();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if the sender is not the owner.\\n     */\\n    function _checkOwner() internal view virtual {\\n        if (owner() != _msgSender()) {\\n            revert OwnableUnauthorizedAccount(_msgSender());\\n        }\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby disabling any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        if (newOwner == address(0)) {\\n            revert OwnableInvalidOwner(address(0));\\n        }\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\",\"keccak256\":\"0xff6d0bb2e285473e5311d9d3caacb525ae3538a80758c10649a4d61029b017bb\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the value of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the value of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves a `value` amount of tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 value) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets a `value` amount of tokens as the allowance of `spender` over the\\n     * caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 value) external returns (bool);\\n\\n    /**\\n     * @dev Moves a `value` amount of tokens from `from` to `to` using the\\n     * allowance mechanism. `value` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address from, address to, uint256 value) external returns (bool);\\n}\\n\",\"keccak256\":\"0xc6a8ff0ea489379b61faa647490411b80102578440ab9d84e9a957cc12164e70\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/extensions/IERC20Permit.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (token/ERC20/extensions/IERC20Permit.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Interface of the ERC20 Permit extension allowing approvals to be made via signatures, as defined in\\n * https://eips.ethereum.org/EIPS/eip-2612[EIP-2612].\\n *\\n * Adds the {permit} method, which can be used to change an account's ERC20 allowance (see {IERC20-allowance}) by\\n * presenting a message signed by the account. By not relying on {IERC20-approve}, the token holder account doesn't\\n * need to send a transaction, and thus is not required to hold Ether at all.\\n *\\n * ==== Security Considerations\\n *\\n * There are two important considerations concerning the use of `permit`. The first is that a valid permit signature\\n * expresses an allowance, and it should not be assumed to convey additional meaning. In particular, it should not be\\n * considered as an intention to spend the allowance in any specific way. The second is that because permits have\\n * built-in replay protection and can be submitted by anyone, they can be frontrun. A protocol that uses permits should\\n * take this into consideration and allow a `permit` call to fail. Combining these two aspects, a pattern that may be\\n * generally recommended is:\\n *\\n * ```solidity\\n * function doThingWithPermit(..., uint256 value, uint256 deadline, uint8 v, bytes32 r, bytes32 s) public {\\n *     try token.permit(msg.sender, address(this), value, deadline, v, r, s) {} catch {}\\n *     doThing(..., value);\\n * }\\n *\\n * function doThing(..., uint256 value) public {\\n *     token.safeTransferFrom(msg.sender, address(this), value);\\n *     ...\\n * }\\n * ```\\n *\\n * Observe that: 1) `msg.sender` is used as the owner, leaving no ambiguity as to the signer intent, and 2) the use of\\n * `try/catch` allows the permit to fail and makes the code tolerant to frontrunning. (See also\\n * {SafeERC20-safeTransferFrom}).\\n *\\n * Additionally, note that smart contract wallets (such as Argent or Safe) are not able to produce permit signatures, so\\n * contracts should have entry points that don't rely on permit.\\n */\\ninterface IERC20Permit {\\n    /**\\n     * @dev Sets `value` as the allowance of `spender` over ``owner``'s tokens,\\n     * given ``owner``'s signed approval.\\n     *\\n     * IMPORTANT: The same issues {IERC20-approve} has related to transaction\\n     * ordering also apply here.\\n     *\\n     * Emits an {Approval} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     * - `deadline` must be a timestamp in the future.\\n     * - `v`, `r` and `s` must be a valid `secp256k1` signature from `owner`\\n     * over the EIP712-formatted function arguments.\\n     * - the signature must use ``owner``'s current nonce (see {nonces}).\\n     *\\n     * For more information on the signature format, see the\\n     * https://eips.ethereum.org/EIPS/eip-2612#specification[relevant EIP\\n     * section].\\n     *\\n     * CAUTION: See Security Considerations above.\\n     */\\n    function permit(\\n        address owner,\\n        address spender,\\n        uint256 value,\\n        uint256 deadline,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) external;\\n\\n    /**\\n     * @dev Returns the current nonce for `owner`. This value must be\\n     * included whenever a signature is generated for {permit}.\\n     *\\n     * Every successful call to {permit} increases ``owner``'s nonce by one. This\\n     * prevents a signature from being used multiple times.\\n     */\\n    function nonces(address owner) external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the domain separator used in the encoding of the signature for {permit}, as defined by {EIP712}.\\n     */\\n    // solhint-disable-next-line func-name-mixedcase\\n    function DOMAIN_SEPARATOR() external view returns (bytes32);\\n}\\n\",\"keccak256\":\"0x6008dabfe393240d73d7dd7688033f72740d570aa422254d29a7dce8568f3aff\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (token/ERC20/utils/SafeERC20.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {IERC20} from \\\"../IERC20.sol\\\";\\nimport {IERC20Permit} from \\\"../extensions/IERC20Permit.sol\\\";\\nimport {Address} from \\\"../../../utils/Address.sol\\\";\\n\\n/**\\n * @title SafeERC20\\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\\n * contract returns false). Tokens that return no value (and instead revert or\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\n * successful.\\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n */\\nlibrary SafeERC20 {\\n    using Address for address;\\n\\n    /**\\n     * @dev An operation with an ERC20 token failed.\\n     */\\n    error SafeERC20FailedOperation(address token);\\n\\n    /**\\n     * @dev Indicates a failed `decreaseAllowance` request.\\n     */\\n    error SafeERC20FailedDecreaseAllowance(address spender, uint256 currentAllowance, uint256 requestedDecrease);\\n\\n    /**\\n     * @dev Transfer `value` amount of `token` from the calling contract to `to`. If `token` returns no value,\\n     * non-reverting calls are assumed to be successful.\\n     */\\n    function safeTransfer(IERC20 token, address to, uint256 value) internal {\\n        _callOptionalReturn(token, abi.encodeCall(token.transfer, (to, value)));\\n    }\\n\\n    /**\\n     * @dev Transfer `value` amount of `token` from `from` to `to`, spending the approval given by `from` to the\\n     * calling contract. If `token` returns no value, non-reverting calls are assumed to be successful.\\n     */\\n    function safeTransferFrom(IERC20 token, address from, address to, uint256 value) internal {\\n        _callOptionalReturn(token, abi.encodeCall(token.transferFrom, (from, to, value)));\\n    }\\n\\n    /**\\n     * @dev Increase the calling contract's allowance toward `spender` by `value`. If `token` returns no value,\\n     * non-reverting calls are assumed to be successful.\\n     */\\n    function safeIncreaseAllowance(IERC20 token, address spender, uint256 value) internal {\\n        uint256 oldAllowance = token.allowance(address(this), spender);\\n        forceApprove(token, spender, oldAllowance + value);\\n    }\\n\\n    /**\\n     * @dev Decrease the calling contract's allowance toward `spender` by `requestedDecrease`. If `token` returns no\\n     * value, non-reverting calls are assumed to be successful.\\n     */\\n    function safeDecreaseAllowance(IERC20 token, address spender, uint256 requestedDecrease) internal {\\n        unchecked {\\n            uint256 currentAllowance = token.allowance(address(this), spender);\\n            if (currentAllowance < requestedDecrease) {\\n                revert SafeERC20FailedDecreaseAllowance(spender, currentAllowance, requestedDecrease);\\n            }\\n            forceApprove(token, spender, currentAllowance - requestedDecrease);\\n        }\\n    }\\n\\n    /**\\n     * @dev Set the calling contract's allowance toward `spender` to `value`. If `token` returns no value,\\n     * non-reverting calls are assumed to be successful. Meant to be used with tokens that require the approval\\n     * to be set to zero before setting it to a non-zero value, such as USDT.\\n     */\\n    function forceApprove(IERC20 token, address spender, uint256 value) internal {\\n        bytes memory approvalCall = abi.encodeCall(token.approve, (spender, value));\\n\\n        if (!_callOptionalReturnBool(token, approvalCall)) {\\n            _callOptionalReturn(token, abi.encodeCall(token.approve, (spender, 0)));\\n            _callOptionalReturn(token, approvalCall);\\n        }\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     */\\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We use {Address-functionCall} to perform this call, which verifies that\\n        // the target address contains contract code and also asserts for success in the low-level call.\\n\\n        bytes memory returndata = address(token).functionCall(data);\\n        if (returndata.length != 0 && !abi.decode(returndata, (bool))) {\\n            revert SafeERC20FailedOperation(address(token));\\n        }\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     *\\n     * This is a variant of {_callOptionalReturn} that silents catches all reverts and returns a bool instead.\\n     */\\n    function _callOptionalReturnBool(IERC20 token, bytes memory data) private returns (bool) {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We cannot use {Address-functionCall} here since this should return false\\n        // and not revert is the subcall reverts.\\n\\n        (bool success, bytes memory returndata) = address(token).call(data);\\n        return success && (returndata.length == 0 || abi.decode(returndata, (bool))) && address(token).code.length > 0;\\n    }\\n}\\n\",\"keccak256\":\"0x37bb49513c49c87c4642a891b13b63571bc87013dde806617aa1efb54605f386\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev The ETH balance of the account is not enough to perform the operation.\\n     */\\n    error AddressInsufficientBalance(address account);\\n\\n    /**\\n     * @dev There's no code at `target` (it is not a contract).\\n     */\\n    error AddressEmptyCode(address target);\\n\\n    /**\\n     * @dev A call to an address target failed. The target may have reverted.\\n     */\\n    error FailedInnerCall();\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://consensys.net/diligence/blog/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.8.20/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        if (address(this).balance < amount) {\\n            revert AddressInsufficientBalance(address(this));\\n        }\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        if (!success) {\\n            revert FailedInnerCall();\\n        }\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason or custom error, it is bubbled\\n     * up by this function (like regular Solidity function calls). However, if\\n     * the call reverted with no returned reason, this function reverts with a\\n     * {FailedInnerCall} error.\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\\n        if (address(this).balance < value) {\\n            revert AddressInsufficientBalance(address(this));\\n        }\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResultFromTarget(target, success, returndata);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResultFromTarget(target, success, returndata);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResultFromTarget(target, success, returndata);\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call to smart-contract was successful, and reverts if the target\\n     * was not a contract or bubbling up the revert reason (falling back to {FailedInnerCall}) in case of an\\n     * unsuccessful call.\\n     */\\n    function verifyCallResultFromTarget(\\n        address target,\\n        bool success,\\n        bytes memory returndata\\n    ) internal view returns (bytes memory) {\\n        if (!success) {\\n            _revert(returndata);\\n        } else {\\n            // only check if target is a contract if the call was successful and the return data is empty\\n            // otherwise we already know that it was a contract\\n            if (returndata.length == 0 && target.code.length == 0) {\\n                revert AddressEmptyCode(target);\\n            }\\n            return returndata;\\n        }\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call was successful, and reverts if it wasn't, either by bubbling the\\n     * revert reason or with a default {FailedInnerCall} error.\\n     */\\n    function verifyCallResult(bool success, bytes memory returndata) internal pure returns (bytes memory) {\\n        if (!success) {\\n            _revert(returndata);\\n        } else {\\n            return returndata;\\n        }\\n    }\\n\\n    /**\\n     * @dev Reverts with returndata if present. Otherwise reverts with {FailedInnerCall}.\\n     */\\n    function _revert(bytes memory returndata) private pure {\\n        // Look for revert reason and bubble it up if present\\n        if (returndata.length > 0) {\\n            // The easiest way to bubble the revert reason is using memory via assembly\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                let returndata_size := mload(returndata)\\n                revert(add(32, returndata), returndata_size)\\n            }\\n        } else {\\n            revert FailedInnerCall();\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xaf28a975a78550e45f65e559a3ad6a5ad43b9b8a37366999abd1b7084eb70721\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.1) (utils/Context.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n\\n    function _contextSuffixLength() internal view virtual returns (uint256) {\\n        return 0;\\n    }\\n}\\n\",\"keccak256\":\"0x493033a8d1b176a037b2cc6a04dad01a5c157722049bbecf632ca876224dd4b2\",\"license\":\"MIT\"},\"contracts/apps/echo/YarEcho.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\npragma solidity 0.8.20;\\n\\nimport { IERC20 } from \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport { SafeERC20 } from \\\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\\\";\\nimport { Ownable, Context } from \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\n\\nimport { IYarConnector } from \\\"../../interfaces/IYarApp.sol\\\";\\n\\ncontract YarEcho is Ownable {\\n    using SafeERC20 for IERC20;\\n\\n    IYarConnector public yarConnector;\\n\\n    string[] public messages;\\n\\n    function messagesCount() external view returns (uint256) {\\n        return messages.length;\\n    }\\n\\n    constructor(address intialYarConnector) Ownable(msg.sender) {\\n        yarConnector = IYarConnector(intialYarConnector);\\n    }\\n\\n    function receiveMessage(string calldata message) external {\\n        require(msg.sender == address(yarConnector), \\\"only yarConnector!\\\");\\n        IYarConnector.Transaction memory transaction = yarConnector.transaction();\\n        require(transaction.initialPeer == address(this), \\\"unknown peer!\\\");\\n        messages.push(message);\\n    }\\n\\n    function sendMessage(\\n        uint256 targetChainId,\\n        string calldata message,\\n        uint256 feeAmount,\\n        uint256 feeSignatureExpired,\\n        bytes calldata feeSignature\\n    ) external payable {\\n        address feeToken = yarConnector.feeToken();\\n        address target = address(this);\\n\\n        if (feeToken == address(0)) {\\n            require(msg.value == feeAmount, \\\"feeAmount!\\\");\\n        } else {\\n            IERC20(feeToken).safeTransferFrom(msg.sender, address(this), feeAmount);\\n        }\\n        if (feeToken != address(0)) IERC20(feeToken).approve(address(yarConnector), feeAmount);\\n        yarConnector.crossCall{ value: feeToken == address(0) ? feeAmount : 0 }(\\n            targetChainId,\\n            target,\\n            abi.encodeWithSelector(YarEcho.receiveMessage.selector, message),\\n            feeAmount,\\n            feeSignatureExpired,\\n            feeSignature\\n        );\\n    }\\n}\\n\",\"keccak256\":\"0x78980aea0062cfd878fb6d31a2018bc2ee52abeeac8d8aaf508f773067cc867f\",\"license\":\"UNLICENSED\"},\"contracts/interfaces/IYarApp.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\npragma solidity 0.8.20;\\n\\nimport { IYarConnector } from \\\"./IYarConnector.sol\\\";\\n\\ninterface IYarApp {\\n    function yarConnector() external view returns (IYarConnector);\\n    function peers(uint256 chainId, address peer) external view returns (bool);\\n}\\n\",\"keccak256\":\"0xd9dd06a6ac23e029f249cbea7fbec2b2ead0ec65e760960840ce6b6cfc0394ea\",\"license\":\"UNLICENSED\"},\"contracts/interfaces/IYarConnector.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\npragma solidity 0.8.20;\\n\\ninterface IYarConnector {\\n    struct Transaction {\\n        uint256 initialChainId;\\n        address initialPeer;\\n    }\\n\\n    function transaction() external view returns (Transaction memory);\\n\\n    function feeToken() external view returns (address);\\n    function crossCall(\\n        uint256 targetChainId,\\n        address target,\\n        bytes calldata data,\\n        uint256 feeAmount,\\n        uint256 feeSignatureExpired,\\n        bytes calldata feeSignature\\n    ) external payable;\\n}\\n\",\"keccak256\":\"0xae61e2d85bf3ae292084e6188702c81819f883c45d6ce31084ca3f0cf771bcb9\",\"license\":\"UNLICENSED\"}},\"version\":1}",
  "bytecode": "0x6080346100c657601f610c6638819003918201601f19168301916001600160401b038311848410176100cb578084926020946040528339810103126100c657516001600160a01b0390818116908190036100c65733156100ad5760005460018060a01b0319903382821617600055604051933391167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0600080a36001541617600155610b8490816100e28239f35b604051631e4fbdf760e01b815260006004820152602490fd5b600080fd5b634e487b7160e01b600052604160045260246000fdfe60406080815260048036101561001457600080fd5b600091823560e01c80630d80fefd146108405780631da7d6c9146104a95780632f049bf3146101e3578063685252f3146101ba578063715018a61461015d5780638da5cb5b146101355780639b71653b146101125763f2fde38b1461007857600080fd5b3461010e57602036600319011261010e576001600160a01b0382358181169391929084900361010a576100a9610a72565b83156100f4575050600054826bffffffffffffffffffffffff60a01b821617600055167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0600080a380f35b51631e4fbdf760e01b8152908101849052602490fd5b8480fd5b8280fd5b8382346101315781600319360112610131576020906002549051908152f35b5080fd5b838234610131578160031936011261013157905490516001600160a01b039091168152602090f35b83346101b757806003193601126101b757610176610a72565b600080546001600160a01b0319811682556001600160a01b03167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e08280a380f35b80fd5b83823461013157816003193601126101315760015490516001600160a01b039091168152602090f35b503461010e57602091826003193601126104a55767ffffffffffffffff9281358481116104a1576102179036908401610a3f565b9260018060a01b039460019580875416803303610469578284918151928380926364cef2bf60e11b82525afa90811561045f579086918b916103ef575b5001511630036103bd5750600254680100000000000000008110156103aa5780866102829201600255610940565b969096610398578411610385575061029a855461098d565b601f811161033f575b508591601f84116001146102de575092829391839287946102d3575b50501b916000199060031b1c191617905580f35b0135925038806102bf565b9183601f1981168789528489209489905b88838310610325575050501061030b575b505050811b01905580f35b0135600019600384901b60f8161c19169055388080610300565b8686013588559096019593840193879350908101906102ef565b858752828720601f850160051c81019184861061037b575b601f0160051c019085905b8281106103705750506102a3565b888155018590610362565b9091508190610357565b634e487b7160e01b875260419052602486fd5b634e487b7160e01b8852878252602488fd5b634e487b7160e01b885260418252602488fd5b5162461bcd60e51b8152908101839052600d60248201526c756e6b6e6f776e20706565722160981b6044820152606490fd5b809250848092503d8311610458575b61040881836109c7565b81010312610454578251908382018281108b82111761043f57878093926104359287528051845201610a9e565b8282015238610254565b604186634e487b7160e01b6000525260246000fd5b8980fd5b503d6103fe565b83513d8c823e3d90fd5b825162461bcd60e51b815280850187905260126024820152716f6e6c7920796172436f6e6e6563746f722160701b6044820152606490fd5b8580fd5b8380fd5b5060a036600319011261010e57602480359267ffffffffffffffff938481116104a1576104d99036908301610a3f565b949060843582811161083c576104f29036908501610a3f565b91909660018060a01b039182600154168851809163647846a560e01b8252818960209485935afa908115610832579085918d916107f6575b50168015949085156106f55760443534036106c65790898b8a8f809a99989796955b8915610647575b50505050509061059e91600154169460001461063d57610590604435935b8c51958693632f049bf360e01b818601528d8501526044840191610aca565b03601f1981018452836109c7565b823b1561010a576105dc916105fe8a519b8c9687958694633ed4774f60e11b86528c358d8701528d309087015260c0604487015260c48601906109ff565b91604435606486015260643560848601526003198584030160a4860152610aca565b03925af1801561063357610610578580f35b84116106225750505238808080808580f35b634e487b7160e01b85526041905283fd5b84513d88823e3d90fd5b6105908793610571565b9160449187949387600154169451968795869463095ea7b360e01b86528501528435908401525af180156106bc579061059e93929161068f575b8b919293508a898e92610553565b6106ae90833d85116106b5575b6106a681836109c7565b810190610ab2565b5038610681565b503d61069c565b8c513d8a823e3d90fd5b8a5162461bcd60e51b8152808a01849052600a818c015269666565416d6f756e742160b01b6044820152606490fd5b8a51838101906323b872dd60e01b8252338c82015230604482015260443560648201526064815260a081018181108b8211176107e3578d52518e9182919082855af13d156107d7573d8981116107c557610771918f918e519061076188601f19601f84011601836109c7565b81528092873d92013e5b83610aeb565b8051908482151592836107ac575b5050506107975790898b8a8f809a999897969561054c565b888a918c5191635274afe760e01b8352820152fd5b6107bc9350820181019101610ab2565b1538848161077f565b634e487b7160e01b8f5260418b528b8ffd5b6107719060609061076b565b50634e487b7160e01b8f5260418b528b8ffd5b809250838092503d831161082b575b61080f81836109c7565b81010312610827576108218591610a9e565b3861052a565b8b80fd5b503d610805565b8a513d8e823e3d90fd5b8780fd5b503461010e57602091826003193601126104a557803560025481101561010a5761086990610940565b91909161092e57508151938491818154906108838261098d565b928386526001928884821691826000146109045750506001146108c6575b85886108c2896108b3848a03856109c7565b519282849384528301906109ff565b0390f35b87945081939291528383205b8284106108ec57505050820101816108b36108c2386108a1565b8054848a0186015288955087949093019281016108d2565b60ff19168882015294151560051b870190940194508593506108b392506108c291503890506108a1565b634e487b7160e01b8552849052602484fd5b6002548110156109775760026000527f405787fa12a823e0f2b7631cc41b3ba8828b3321ca811111fa75cd3aa3bb5ace0190600090565b634e487b7160e01b600052603260045260246000fd5b90600182811c921680156109bd575b60208310146109a757565b634e487b7160e01b600052602260045260246000fd5b91607f169161099c565b90601f8019910116810190811067ffffffffffffffff8211176109e957604052565b634e487b7160e01b600052604160045260246000fd5b919082519283825260005b848110610a2b575050826000602080949584010152601f8019910116010190565b602081830181015184830182015201610a0a565b9181601f84011215610a6d5782359167ffffffffffffffff8311610a6d5760208381860195010111610a6d57565b600080fd5b6000546001600160a01b03163303610a8657565b60405163118cdaa760e01b8152336004820152602490fd5b51906001600160a01b0382168203610a6d57565b90816020910312610a6d57518015158103610a6d5790565b908060209392818452848401376000828201840152601f01601f1916010190565b90610b125750805115610b0057805190602001fd5b604051630a12f52160e11b8152600490fd5b81511580610b45575b610b23575090565b604051639996b31560e01b81526001600160a01b039091166004820152602490fd5b50803b15610b1b56fea26469706673582212204d5bc8214105b418b8479b19110b676e5ac90f80d2ed2af7176bd79f96e5ed8d64736f6c63430008140033",
  "deployedBytecode": "0x60406080815260048036101561001457600080fd5b600091823560e01c80630d80fefd146108405780631da7d6c9146104a95780632f049bf3146101e3578063685252f3146101ba578063715018a61461015d5780638da5cb5b146101355780639b71653b146101125763f2fde38b1461007857600080fd5b3461010e57602036600319011261010e576001600160a01b0382358181169391929084900361010a576100a9610a72565b83156100f4575050600054826bffffffffffffffffffffffff60a01b821617600055167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0600080a380f35b51631e4fbdf760e01b8152908101849052602490fd5b8480fd5b8280fd5b8382346101315781600319360112610131576020906002549051908152f35b5080fd5b838234610131578160031936011261013157905490516001600160a01b039091168152602090f35b83346101b757806003193601126101b757610176610a72565b600080546001600160a01b0319811682556001600160a01b03167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e08280a380f35b80fd5b83823461013157816003193601126101315760015490516001600160a01b039091168152602090f35b503461010e57602091826003193601126104a55767ffffffffffffffff9281358481116104a1576102179036908401610a3f565b9260018060a01b039460019580875416803303610469578284918151928380926364cef2bf60e11b82525afa90811561045f579086918b916103ef575b5001511630036103bd5750600254680100000000000000008110156103aa5780866102829201600255610940565b969096610398578411610385575061029a855461098d565b601f811161033f575b508591601f84116001146102de575092829391839287946102d3575b50501b916000199060031b1c191617905580f35b0135925038806102bf565b9183601f1981168789528489209489905b88838310610325575050501061030b575b505050811b01905580f35b0135600019600384901b60f8161c19169055388080610300565b8686013588559096019593840193879350908101906102ef565b858752828720601f850160051c81019184861061037b575b601f0160051c019085905b8281106103705750506102a3565b888155018590610362565b9091508190610357565b634e487b7160e01b875260419052602486fd5b634e487b7160e01b8852878252602488fd5b634e487b7160e01b885260418252602488fd5b5162461bcd60e51b8152908101839052600d60248201526c756e6b6e6f776e20706565722160981b6044820152606490fd5b809250848092503d8311610458575b61040881836109c7565b81010312610454578251908382018281108b82111761043f57878093926104359287528051845201610a9e565b8282015238610254565b604186634e487b7160e01b6000525260246000fd5b8980fd5b503d6103fe565b83513d8c823e3d90fd5b825162461bcd60e51b815280850187905260126024820152716f6e6c7920796172436f6e6e6563746f722160701b6044820152606490fd5b8580fd5b8380fd5b5060a036600319011261010e57602480359267ffffffffffffffff938481116104a1576104d99036908301610a3f565b949060843582811161083c576104f29036908501610a3f565b91909660018060a01b039182600154168851809163647846a560e01b8252818960209485935afa908115610832579085918d916107f6575b50168015949085156106f55760443534036106c65790898b8a8f809a99989796955b8915610647575b50505050509061059e91600154169460001461063d57610590604435935b8c51958693632f049bf360e01b818601528d8501526044840191610aca565b03601f1981018452836109c7565b823b1561010a576105dc916105fe8a519b8c9687958694633ed4774f60e11b86528c358d8701528d309087015260c0604487015260c48601906109ff565b91604435606486015260643560848601526003198584030160a4860152610aca565b03925af1801561063357610610578580f35b84116106225750505238808080808580f35b634e487b7160e01b85526041905283fd5b84513d88823e3d90fd5b6105908793610571565b9160449187949387600154169451968795869463095ea7b360e01b86528501528435908401525af180156106bc579061059e93929161068f575b8b919293508a898e92610553565b6106ae90833d85116106b5575b6106a681836109c7565b810190610ab2565b5038610681565b503d61069c565b8c513d8a823e3d90fd5b8a5162461bcd60e51b8152808a01849052600a818c015269666565416d6f756e742160b01b6044820152606490fd5b8a51838101906323b872dd60e01b8252338c82015230604482015260443560648201526064815260a081018181108b8211176107e3578d52518e9182919082855af13d156107d7573d8981116107c557610771918f918e519061076188601f19601f84011601836109c7565b81528092873d92013e5b83610aeb565b8051908482151592836107ac575b5050506107975790898b8a8f809a999897969561054c565b888a918c5191635274afe760e01b8352820152fd5b6107bc9350820181019101610ab2565b1538848161077f565b634e487b7160e01b8f5260418b528b8ffd5b6107719060609061076b565b50634e487b7160e01b8f5260418b528b8ffd5b809250838092503d831161082b575b61080f81836109c7565b81010312610827576108218591610a9e565b3861052a565b8b80fd5b503d610805565b8a513d8e823e3d90fd5b8780fd5b503461010e57602091826003193601126104a557803560025481101561010a5761086990610940565b91909161092e57508151938491818154906108838261098d565b928386526001928884821691826000146109045750506001146108c6575b85886108c2896108b3848a03856109c7565b519282849384528301906109ff565b0390f35b87945081939291528383205b8284106108ec57505050820101816108b36108c2386108a1565b8054848a0186015288955087949093019281016108d2565b60ff19168882015294151560051b870190940194508593506108b392506108c291503890506108a1565b634e487b7160e01b8552849052602484fd5b6002548110156109775760026000527f405787fa12a823e0f2b7631cc41b3ba8828b3321ca811111fa75cd3aa3bb5ace0190600090565b634e487b7160e01b600052603260045260246000fd5b90600182811c921680156109bd575b60208310146109a757565b634e487b7160e01b600052602260045260246000fd5b91607f169161099c565b90601f8019910116810190811067ffffffffffffffff8211176109e957604052565b634e487b7160e01b600052604160045260246000fd5b919082519283825260005b848110610a2b575050826000602080949584010152601f8019910116010190565b602081830181015184830182015201610a0a565b9181601f84011215610a6d5782359167ffffffffffffffff8311610a6d5760208381860195010111610a6d57565b600080fd5b6000546001600160a01b03163303610a8657565b60405163118cdaa760e01b8152336004820152602490fd5b51906001600160a01b0382168203610a6d57565b90816020910312610a6d57518015158103610a6d5790565b908060209392818452848401376000828201840152601f01601f1916010190565b90610b125750805115610b0057805190602001fd5b604051630a12f52160e11b8152600490fd5b81511580610b45575b610b23575090565b604051639996b31560e01b81526001600160a01b039091166004820152602490fd5b50803b15610b1b56fea26469706673582212204d5bc8214105b418b8479b19110b676e5ac90f80d2ed2af7176bd79f96e5ed8d64736f6c63430008140033",
  "devdoc": {
    "errors": {
      "AddressEmptyCode(address)": [
        {
          "details": "There's no code at `target` (it is not a contract)."
        }
      ],
      "AddressInsufficientBalance(address)": [
        {
          "details": "The ETH balance of the account is not enough to perform the operation."
        }
      ],
      "FailedInnerCall()": [
        {
          "details": "A call to an address target failed. The target may have reverted."
        }
      ],
      "OwnableInvalidOwner(address)": [
        {
          "details": "The owner is not a valid owner account. (eg. `address(0)`)"
        }
      ],
      "OwnableUnauthorizedAccount(address)": [
        {
          "details": "The caller account is not authorized to perform an operation."
        }
      ],
      "SafeERC20FailedOperation(address)": [
        {
          "details": "An operation with an ERC20 token failed."
        }
      ]
    },
    "kind": "dev",
    "methods": {
      "owner()": {
        "details": "Returns the address of the current owner."
      },
      "renounceOwnership()": {
        "details": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby disabling any functionality that is only available to the owner."
      },
      "transferOwnership(address)": {
        "details": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 8,
        "contract": "contracts/apps/echo/YarEcho.sol:YarEcho",
        "label": "_owner",
        "offset": 0,
        "slot": "0",
        "type": "t_address"
      },
      {
        "astId": 3090,
        "contract": "contracts/apps/echo/YarEcho.sol:YarEcho",
        "label": "yarConnector",
        "offset": 0,
        "slot": "1",
        "type": "t_contract(IYarConnector)3318"
      },
      {
        "astId": 3093,
        "contract": "contracts/apps/echo/YarEcho.sol:YarEcho",
        "label": "messages",
        "offset": 0,
        "slot": "2",
        "type": "t_array(t_string_storage)dyn_storage"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_string_storage)dyn_storage": {
        "base": "t_string_storage",
        "encoding": "dynamic_array",
        "label": "string[]",
        "numberOfBytes": "32"
      },
      "t_contract(IYarConnector)3318": {
        "encoding": "inplace",
        "label": "contract IYarConnector",
        "numberOfBytes": "20"
      },
      "t_string_storage": {
        "encoding": "bytes",
        "label": "string",
        "numberOfBytes": "32"
      }
    }
  }
}